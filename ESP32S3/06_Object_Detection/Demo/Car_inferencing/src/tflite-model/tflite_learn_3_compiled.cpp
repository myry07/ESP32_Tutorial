/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 09.12.2024 21:54:27

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 31354, -33863, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00015933236863929778, 0.00014563571312464774, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 42,-33,-52,86,-89,23,-20,78,94,-16,-31,-43,-24,71,-60,16,100,-57,-53,-60,125,106,83,-75,-40,-78,-39,127,18,-104,-12,49, 
  /* [1][0][][] */ 57,84,83,-56,-69,68,-14,14,-27,-16,32,107,125,42,38,12,-32,12,-53,-127,-77,19,25,110,75,76,-41,-27,92,-102,-123,-6, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0035661922302097082, 0.0032596325036138296, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -55, 74, 98, -1065, -1105, -9, -896, 129, -1159, -435, -146, -313, 159, -28, -280, -1268, -229, -1570, -1070, 1203, -539, -933, -214, -294, -581, -34, -674, 1874, -1529, -1039, 1095, -1025, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.086503344704397e-05, 5.5003267334541306e-05, 4.7741941671120003e-05, 4.9344544095220044e-05, 4.7437857574550435e-05, 5.9517682529985905e-05, 4.7675646783318371e-05, 4.4315471313893795e-05, 5.087112367618829e-05, 5.5866130423964933e-05, 5.0725455366773531e-05, 5.796523328172043e-05, 4.9914277042262256e-05, 5.4599098803009838e-05, 6.2738254200667143e-05, 4.9610131100052968e-05, 5.5742537369951606e-05, 5.8585959777701646e-05, 4.9531285185366869e-05, 6.1159036704339087e-05, 5.6675311498111114e-05, 5.2231338486308232e-05, 5.8720255765365437e-05, 4.9226524424739182e-05, 6.0822381783509627e-05, 5.1721472118515521e-05, 5.7492627092869952e-05, 6.0041598771931604e-05, 5.1209037337685004e-05, 4.9966165533987805e-05, 6.3559215050190687e-05, 4.9570844566915184e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -33,-37,67,10,78,2,-52,-69,10,-55,-84,13,44,-8,-24,20,-30,-7,-52,-32,-71,-85,0,90,-127,13,60,-31,74,-1,-8,-49,73,-38,-62,47,-64,-61,-73,39,65,-51,-92,84,54,-105,75,-29,35,-45,-14,27,-49,-23,-59,85,10,60,84,-81,-53,71,-58,43,2,11,56,67,34,75,35,-75,76,-84,26,51,-69,18,-63,-6,35,18,48,-28,-68,-30,-68,63,-3,65,-26,-68,11,37,23,7, 
  /* [1][0][][] */ -54,42,-59,3,-15,81,42,16,30,-64,-82,102,63,-39,27,58,104,-11,30,108,-52,-20,39,42,-32,19,-16,98,10,15,88,-37,63,93,3,21,61,44,-10,-27,-42,19,-49,-57,-5,21,-19,-37,6,-79,104,7,18,83,-53,-23,-1,97,56,77,-29,109,-56,-48,-29,36,72,40,88,35,-14,20,-76,69,-29,31,81,-17,-27,43,-62,71,-49,-127,14,101,-59,-38,35,62,56,37,63,59,25,-14, 
  /* [2][0][][] */ 31,52,-58,91,-2,-33,94,95,-125,96,-32,127,95,-35,83,-93,-30,0,33,67,-103,-31,112,43,-89,78,113,25,-60,85,83,100,-43,-5,-71,-96,-54,81,96,3,-98,-52,-23,17,-50,97,-17,-63,117,19,97,-121,-31,76,29,34,-88,107,-47,18,4,74,-37,78,100,52,57,87,-78,75,-25,-51,45,-71,40,19,-29,0,11,-6,36,-79,-20,-79,-9,-76,-24,-13,50,100,-41,26,-43,-85,-39,-72, 
  /* [3][0][][] */ 42,-23,11,-43,-84,21,-121,11,23,-4,34,-20,58,64,41,-18,68,63,-14,-11,78,-99,-80,-123,13,-121,-94,70,16,-109,53,-16,-72,-54,-37,-36,-104,-33,13,19,-45,-104,-51,-23,41,3,-63,-96,36,-35,14,-24,60,2,55,-110,-71,-125,-125,-75,-108,8,-56,41,26,-52,-76,-51,-51,-84,-18,65,-5,-56,25,-66,4,62,61,-78,-101,-127,12,59,3,16,-60,-126,-93,16,-23,-118,59,-106,-102,14, 
  /* [4][0][][] */ 23,67,-25,24,-49,-47,3,-10,36,56,-32,22,1,-53,-35,-84,-47,-29,-14,-12,73,-105,53,-1,30,-28,33,-78,-68,7,-85,-72,37,79,-11,-116,-69,38,-127,19,-69,-80,-20,-106,6,71,10,26,-5,-61,-40,-92,-105,16,-102,-6,75,-110,-1,-12,-18,-91,-59,-85,-67,26,-23,-58,0,-115,-108,-100,-74,56,66,24,30,-45,-32,-76,-20,-64,-46,24,-24,38,58,-23,-125,-91,18,16,2,67,-113,-23, 
  /* [5][0][][] */ 59,-51,52,59,40,-69,27,48,47,-73,0,-36,26,53,33,33,60,62,-51,83,11,23,22,-2,-127,-46,3,-53,36,33,19,-61,-18,9,-42,6,-64,-31,35,37,-65,-30,0,87,-5,11,27,-33,-56,61,30,-11,36,25,28,-5,57,52,-32,-18,38,-34,23,-43,-9,80,-9,24,58,8,49,-41,-25,51,-12,-61,22,-18,15,49,77,25,11,45,-67,66,-10,39,26,-73,65,79,-22,9,55,-73, 
  /* [6][0][][] */ 10,-60,80,53,-96,-78,-25,55,-25,-78,-11,-102,65,70,107,-127,46,-13,-12,76,-89,-83,81,34,-54,-85,-18,-73,-21,-120,21,-80,-104,-121,-46,-112,-30,18,-115,57,57,28,37,-32,-121,81,-63,-61,-68,35,-42,-78,33,-72,65,-37,-13,-20,-86,88,-95,-15,38,-86,-66,43,81,-58,63,17,-51,-22,35,-71,-95,-56,-91,-100,-31,-16,13,-41,72,-42,-54,-103,-48,-110,46,61,68,-6,-51,-82,54,-48, 
  /* [7][0][][] */ 100,88,-40,-42,-58,127,-9,9,94,15,-92,24,61,-102,50,80,67,39,1,123,43,24,3,101,-95,102,54,74,-79,118,-13,47,37,33,70,96,-77,79,-7,-2,100,-59,64,91,75,-9,92,-104,81,-66,-93,-90,-17,104,23,37,99,-69,9,-42,29,11,74,-99,-55,-44,78,30,-103,21,40,94,92,15,70,55,-40,67,-86,36,90,-37,-28,-95,77,46,-113,108,65,13,69,78,-60,-49,1,-69, 
  /* [8][0][][] */ -11,5,-64,-107,20,-7,-94,-48,-2,1,12,49,-25,-34,-98,-84,-87,53,-76,-16,6,-24,40,64,-43,49,11,40,-84,-9,-108,70,49,-55,11,-30,70,-22,-43,31,38,56,-49,-127,-39,-44,-47,70,-9,-103,-84,-9,-85,-34,-57,-122,47,62,-109,65,69,6,15,60,-57,-65,-46,60,-100,14,22,-32,37,36,-17,-7,-64,61,46,44,0,37,-108,-89,6,11,36,-59,18,-53,-89,56,-98,-102,-71,32, 
  /* [9][0][][] */ 8,45,92,18,41,-110,-59,-86,76,18,21,16,-32,-55,-69,5,-9,-23,-62,-78,54,87,-92,-102,108,-22,-9,41,6,-58,-87,63,28,-13,17,-14,-81,25,-19,-60,20,-79,54,-90,36,61,-85,57,21,-6,-77,9,39,-79,-76,58,94,-64,-33,38,-34,57,98,-83,-91,8,82,27,-24,58,100,-85,-16,77,-84,-76,-58,-108,17,127,24,2,86,57,-13,-89,26,27,106,40,-28,67,84,49,41,-30, 
  /* [10][0][][] */ -67,80,72,-52,0,104,101,27,-6,44,12,-37,92,48,-25,4,-13,88,-86,-40,-35,5,51,-38,-38,51,-86,-88,-44,75,-72,-60,89,92,107,62,-15,-1,-33,55,-24,110,-127,-14,-59,-74,0,-60,26,-11,43,-39,59,34,-46,-16,-109,4,31,-34,8,85,78,47,112,-62,-73,-18,18,-5,-113,-47,82,49,-68,81,-2,72,52,-12,62,5,35,48,-110,63,76,-12,-3,-1,-27,-42,-45,-55,-37,-70, 
  /* [11][0][][] */ 70,-25,-21,79,90,40,42,8,56,77,-83,94,-7,-69,10,-73,-39,-68,47,35,-7,27,14,-74,-127,-69,-19,27,50,-19,20,-16,-56,-54,39,24,-37,56,-28,-37,-16,86,-80,6,-14,-92,-58,-72,78,70,82,-18,-72,-54,15,26,-90,-40,-15,-88,-77,72,47,12,26,49,-46,13,56,50,-96,-51,30,76,-87,24,-73,32,-61,15,-88,-16,-58,-69,6,-58,3,-37,-101,-20,-8,-72,-74,-51,-57,-36, 
  /* [12][0][][] */ 2,77,-48,7,93,26,-16,41,-97,69,-11,34,-24,-7,52,-59,-64,-5,-38,-51,11,-23,28,107,-120,-35,105,-68,83,26,-19,115,-55,-47,-27,15,21,-67,-13,63,108,51,-127,-13,7,-77,-28,108,-11,-112,-49,51,44,20,-61,92,-40,-29,56,72,69,118,-7,62,114,40,-25,111,57,101,7,76,87,96,-2,-9,-11,52,-91,-91,-46,95,32,-25,-38,40,42,114,-106,-91,63,57,86,-23,29,56, 
  /* [13][0][][] */ 75,-44,79,80,85,102,73,52,32,-68,1,-7,75,41,52,-51,-85,-39,-57,32,37,-38,93,-22,-92,37,11,22,-74,-64,72,35,47,87,-14,30,-46,-28,15,74,-41,74,-69,27,-12,-5,-4,-35,54,70,-16,-127,-73,39,88,-54,-52,34,-13,-59,-13,108,-75,22,-32,-47,-70,69,-32,-3,50,7,-66,24,-61,-38,-71,63,48,-84,40,-72,64,-12,-90,-74,66,92,-30,-41,-73,55,87,-46,57,-10, 
  /* [14][0][][] */ -53,-93,51,52,58,-6,-6,-90,-82,-15,29,71,-23,-64,-79,-87,-29,-27,-6,23,-49,3,-9,50,-127,-45,-26,1,-91,-88,-51,28,85,-14,-26,-2,79,78,15,-72,6,-64,-7,69,65,-122,52,-66,99,14,58,-6,65,1,-3,17,-44,7,40,46,-28,-44,-36,56,-57,-19,41,-81,-74,-51,-79,67,8,51,22,-61,23,-60,18,-8,24,-8,-91,-52,-105,-58,-79,65,52,1,48,-31,52,60,-9,38, 
  /* [15][0][][] */ -13,-46,-53,26,51,-104,23,-109,78,-34,-87,-28,65,-41,-103,-120,50,-16,-111,-9,21,-1,35,66,102,27,8,57,-10,26,26,-114,-27,-21,-84,-32,-84,58,69,-84,-17,68,-21,-45,-6,-90,-80,-93,-31,-109,-33,6,-115,-113,-76,-38,54,19,-73,72,-63,-85,-22,57,-60,59,-85,-21,-78,-32,19,-93,-11,-51,26,-118,-25,18,68,45,-101,15,-120,-86,-127,-55,-114,10,54,39,-123,-63,16,78,-127,65, 
  /* [16][0][][] */ -48,-15,81,-57,14,67,-58,18,75,16,-86,29,-26,-15,-53,-54,62,40,51,31,98,78,-44,18,41,33,-71,35,-84,-2,16,-6,-101,45,28,45,-47,43,-42,-77,8,-51,91,51,26,84,68,-17,-67,-74,-11,127,-46,72,39,14,49,48,41,-3,73,63,28,30,24,0,-43,62,24,57,6,-23,8,71,37,72,-24,54,-91,4,6,-74,52,49,16,66,81,-6,88,11,6,67,51,-13,-73,31, 
  /* [17][0][][] */ -14,-107,-17,34,-59,-101,-79,-103,1,-85,24,30,34,6,-126,10,4,7,48,61,-104,-52,-26,-51,-14,21,-89,-9,43,-67,-57,15,-42,-53,-13,-28,-54,48,-97,-50,-98,-43,-50,-32,-8,-27,47,-104,39,42,-40,-6,-49,44,47,-83,-127,24,-95,-115,-5,-81,25,43,-87,-89,-2,-106,-119,-15,40,-15,-18,-105,-81,14,58,-40,-3,-74,-29,-30,-96,-109,-120,32,18,-50,-22,31,-98,-126,-38,43,-32,-14, 
  /* [18][0][][] */ -106,62,69,-84,-31,-120,-113,-20,-29,39,-117,-65,-56,5,28,-75,-6,-45,66,-45,63,-64,-6,-93,44,-107,-39,71,1,5,-24,13,15,-48,-117,-116,-52,55,-54,30,-59,-25,-27,-32,-123,-11,-3,-27,-9,5,37,2,-118,-32,-22,51,-62,6,-42,-126,49,70,-13,7,-84,-127,-51,52,35,-91,-86,70,-108,-23,-101,-114,23,23,-26,-89,-73,-31,-12,-33,63,-54,36,34,-118,-89,-79,67,51,-71,18,-42, 
  /* [19][0][][] */ 46,74,71,38,53,-33,90,79,119,-35,52,0,-43,52,-13,81,83,-33,100,60,25,85,-3,28,105,-36,45,-2,-42,-53,-34,71,69,-31,52,16,31,-30,-13,-45,60,-47,-35,50,-34,74,74,-30,19,58,-17,75,-9,44,21,11,40,100,15,17,93,-13,111,55,-39,37,-3,40,23,51,104,-15,-15,-55,-3,-18,40,-62,65,127,62,-58,6,98,-14,36,34,30,100,51,34,56,-3,101,73,-11, 
  /* [20][0][][] */ -14,36,54,67,-82,51,-3,27,43,-6,-79,-13,-21,94,15,-71,-57,-47,-61,-40,17,-14,-72,-71,127,-67,-96,20,8,-6,-46,67,62,17,-25,44,15,-29,-26,-101,-80,-42,-8,-94,-38,-61,-51,67,27,-71,-91,62,21,66,22,-16,104,36,63,50,68,-59,-64,-41,-37,-64,-55,-5,-76,-68,-29,43,-65,-73,7,7,67,40,70,87,61,-5,59,25,37,72,-12,40,30,67,23,33,14,16,-12,1, 
  /* [21][0][][] */ 43,46,39,-105,61,-81,39,-10,-32,-75,-83,20,-18,-4,-66,-96,-102,-37,-2,-26,61,-77,43,-81,9,-94,-39,43,-16,-14,-24,-38,-14,-4,-98,-127,95,56,-112,-35,-29,-7,-16,-13,-76,-101,-90,55,-11,-99,-18,23,12,46,-95,2,-88,27,-50,80,37,-71,-10,-27,52,5,-55,-87,-111,-17,21,48,8,-39,40,27,-109,-34,35,54,-11,60,4,-104,-12,-97,32,-74,-116,58,60,-107,-61,-89,39,-45, 
  /* [22][0][][] */ 4,-25,-77,-84,68,-28,82,21,-108,58,-66,-88,84,-115,-85,-56,44,82,-118,-36,43,-81,25,32,28,-12,-68,84,-57,-49,-55,-73,34,49,8,-10,20,-46,-56,-71,-5,0,-44,87,60,-81,49,-17,-22,-102,12,-58,-53,-51,-35,22,-56,-12,-17,-24,93,-46,-74,-88,-42,16,-75,-26,77,72,-35,-3,-43,-32,55,-89,47,-22,46,55,66,-87,-95,-127,42,75,56,-21,-71,2,-72,45,-14,-11,-33,55, 
  /* [23][0][][] */ 39,-65,-9,50,94,-84,9,-93,-20,-63,69,83,21,-119,15,-35,97,-8,-90,99,38,-92,98,-11,-80,-16,87,29,61,43,71,-23,-32,41,23,16,104,-10,-105,30,-95,11,-24,-80,-40,-95,101,24,94,-110,-65,-99,76,-44,-43,89,-116,-1,94,50,-84,-69,-59,0,43,30,-94,-101,54,-2,64,-57,-1,-33,-31,-104,52,0,77,76,-52,-48,6,-127,64,8,92,-16,-122,18,62,6,75,-108,-32,62, 
  /* [24][0][][] */ -74,-35,-98,-60,-62,-81,-51,-61,20,84,46,27,75,11,-28,-95,-47,40,13,-39,47,-75,-49,-23,-7,-25,54,38,72,37,-3,-43,-5,0,32,14,-31,-83,34,3,-55,-87,41,8,24,-47,8,33,-39,-51,-13,-16,44,42,47,-56,-20,63,-3,-9,71,-1,7,65,-74,56,-24,-74,-79,27,-68,-19,-34,4,61,57,45,-50,-83,-85,-71,-98,-63,-127,-26,31,-30,-69,-8,-102,-26,-57,-5,-6,-72,-20, 
  /* [25][0][][] */ -81,-31,-73,-5,92,-41,-72,46,-7,-79,-31,42,73,-27,-86,-12,-40,72,-14,-76,29,46,2,-26,-54,-42,-69,47,61,-66,44,112,94,-79,46,53,102,-73,-26,9,-61,94,-127,22,105,31,52,28,-62,62,-47,-39,46,-1,-48,26,-42,63,-80,76,115,55,26,51,16,71,-7,2,-70,11,-52,-82,42,-124,69,7,76,77,18,-4,41,46,-79,29,-70,-32,-88,-63,-56,-70,53,37,-105,-37,-16,-97, 
  /* [26][0][][] */ 27,-105,-32,-25,-90,-23,-24,-26,-47,-104,65,43,-77,-26,-10,-27,67,5,-65,-69,5,50,56,-9,83,44,-8,17,-4,-13,-86,-19,-40,-63,-93,-25,-68,57,-52,62,-71,60,80,5,-74,45,-42,62,-36,48,-20,94,-9,-53,-13,-100,127,29,25,1,-16,-91,38,-35,68,-32,-57,29,-83,35,75,54,43,-80,-82,-2,17,-99,-89,-3,-37,42,53,-38,47,-15,-46,-7,-63,72,8,-6,13,116,21,66, 
  /* [27][0][][] */ 29,47,-6,-57,-77,-27,-19,14,96,74,81,-72,-13,69,71,36,50,12,71,-51,5,24,22,-34,-10,57,-89,42,55,54,2,20,58,79,-57,-44,-27,-11,-32,36,-2,77,39,52,93,84,61,126,51,84,62,11,-49,-5,31,-25,127,-20,-63,-17,3,-19,43,52,31,21,-66,127,62,16,-17,35,62,-12,37,7,75,-59,123,124,91,8,105,27,-2,8,14,78,38,58,36,-31,70,81,117,82, 
  /* [28][0][][] */ 37,-34,41,3,-126,-84,-119,-93,-42,-120,12,26,-104,-108,-17,47,42,58,-89,37,-34,-16,-124,-87,-101,32,-102,-80,-97,-90,-38,-53,-113,-23,30,41,1,-126,-69,5,50,0,-95,13,-105,-44,-23,9,9,-88,-77,-34,-107,-12,8,-4,14,-47,37,5,-20,-66,-111,-33,19,26,-38,30,-99,-4,-122,-68,22,16,-42,-120,-127,-55,-85,9,-95,-109,69,-34,14,-119,18,-71,-120,-59,-65,-92,-56,31,-84,-86, 
  /* [29][0][][] */ 29,24,31,-71,-101,-14,-127,-18,86,-41,-97,-110,68,-71,-64,-58,-109,63,15,-81,-80,-27,23,-20,29,-19,-61,-45,-107,-27,63,-27,17,-22,-92,-72,-34,80,-28,56,14,69,12,47,-26,75,-49,-38,-9,-25,24,-83,36,-107,69,15,-98,23,-65,73,-122,57,-97,-70,-77,-76,24,56,60,-103,26,-87,72,66,31,2,77,-78,-46,16,-28,-96,-14,-71,46,79,17,48,-39,67,54,44,-117,0,-32,44, 
  /* [30][0][][] */ 30,-2,-29,39,-55,41,-18,-1,119,-2,13,-22,-58,20,51,43,16,56,74,-45,80,-65,-55,22,-45,32,-34,127,-1,-61,-55,26,-45,-29,-73,-21,51,8,10,16,102,-12,-1,116,102,19,74,65,-19,65,26,-28,71,13,14,78,-38,-31,-56,-34,-30,29,0,-8,-63,-6,-51,115,-21,87,78,-10,-45,91,48,-13,7,-20,-1,6,36,36,-66,33,-53,67,-67,117,24,-55,89,43,-6,49,29,-22, 
  /* [31][0][][] */ 51,-102,14,66,21,32,-75,-108,-31,-41,-91,-102,65,-107,-62,75,-75,-100,78,21,38,21,-49,70,106,-122,10,14,-83,-85,18,72,-6,-4,-101,-23,63,-48,-81,-119,27,-82,31,6,-18,-67,-51,0,39,1,59,-24,-123,-72,-94,-1,-113,37,-19,78,-55,-25,53,-89,39,76,-60,-89,43,-127,-122,-14,-106,-58,-19,-15,-72,-63,23,64,-86,-58,28,45,28,63,-106,-6,-1,-64,-90,-70,-11,76,-29,-41, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0025867638178169727, 0.0023376387543976307, 0.0020290324464440346, 0.002097143093124032, 0.0020161089487373829, 0.00252950144931674, 0.0020262149628251791, 0.0018834074726328254, 0.0021620227489620447, 0.0023743105120956898, 0.0021558317821472883, 0.0024635223671793938, 0.0021213567815721035, 0.0023204616736620665, 0.0026663755998015404, 0.002108430489897728, 0.0023690578527748585, 0.0024899032432585955, 0.0021050795912742615, 0.002599259139969945, 0.0024087007623165846, 0.0022198318038135767, 0.0024956108536571264, 0.0020921272225677967, 0.0025849512312561274, 0.0021981624886393547, 0.0024434365332126617, 0.0025517679750919342, 0.002176383975893259, 0.0021235619205981493, 0.002701266435906291, 0.0021067608613520861, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1106, -332, 3376, 5786, 4138, -2100, 3978, -1547, -2907, -1097, 6413, -2390, 3476, 4768, 1259, 1810, -570, -862, -1870, 4390, 1737, -99, 1640, -585, -354, 3279, 1251, 2464, 4528, 1468, 3932, 696, 764, 3316, 4102, 2212, -1524, 2151, 2189, -4987, -431, 531, 340, 1121, -1567, 443, -1774, 303, -9001, 2401, 565, -4063, 5772, -1212, 2379, 1092, 1222, 2158, -652, -3112, -53, 1513, 427, 4001, 4892, 2536, 2728, 4620, 2888, -746, 2609, 5763, 2411, -1750, 4917, 5289, 522, -3956, 352, 1273, 10153, 1425, -533, -1344, 687, 395, 685, -2861, 4902, -652, 4081, 1187, 5, -2380, -40, 852, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012174688163213432, 0.00015499984147027135, 0.00016450995462946594, 0.00012879076530225575, 0.00015052201342768967, 0.00021729116269852966, 0.0001537902862764895, 0.00016611984756309539, 0.00016157231584656984, 0.00018894654931500554, 0.00011080768308602273, 0.0001797390723368153, 0.00014888771693222225, 0.00014093237405177206, 0.00023949042952153832, 0.00027797764050774276, 0.0002589886134956032, 0.00018402165733277798, 0.00013716914691030979, 0.00013890744594391435, 0.00018302920216228813, 0.00025795359397307038, 0.0001926249242387712, 0.00021007168106734753, 0.00028260270482860506, 0.00017279374878853559, 0.00022642526892013848, 0.00010995069169439375, 0.00015549254021607339, 0.0002494417130947113, 0.00012563540076371282, 0.00021910971554461867, 0.00029225731850601733, 0.00016151824092958122, 0.00014860241208225489, 0.00021231795835774392, 0.00012366333976387978, 0.00016799164586700499, 0.00017584915622137487, 0.00011760775669245049, 0.00017654418479651213, 0.00020262809994164854, 0.00016427660011686385, 0.00018890966020990163, 0.00018144871864933521, 0.00021755120542366058, 0.00015424177399836481, 0.00018747801368590444, 8.3748549513984472e-05, 0.00013264679000712931, 0.00028187580755911767, 0.00011909564636880532, 0.00012103533663321286, 0.00016127810522448272, 0.00012821560085285455, 0.00021175644360482693, 0.00021579180611297488, 0.0001427053939551115, 0.00026965932920575142, 0.00012946185597684234, 0.00018061783339362592, 0.00015348639863077551, 0.00023587238683830947, 0.00015732859901618212, 0.00013684938312508166, 0.00018003603327088058, 0.00013672764180228114, 0.0001451158314011991, 0.00021946791093796492, 0.00018757827638182789, 0.00017544781439937651, 0.00011498417734401301, 0.00015804526628926396, 0.00015712535241618752, 0.00012925110058858991, 0.00013188201410230249, 0.00010402507905382663, 0.00017563055735081434, 0.00015952010289765894, 0.00011230409290874377, 8.0988203990273178e-05, 0.00018666367395780981, 0.00020396188483573496, 0.00021110937814228237, 0.00025136416661553085, 0.00013258906255941838, 0.00023845398391131312, 0.00015863662702031434, 0.00015632342547178268, 0.00018435047240927815, 0.00013439061876852065, 0.00014176922559272498, 0.00018904410535469651, 0.00015450401406269521, 0.00031558683258481324, 0.00020879738440271467, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -13,117,-71,31,46,-28,94,82,-53,12,25,-123,92,127,-51,17, 
  /* [1][0][][] */ -12,15,-58,-15,3,77,15,-127,57,-45,-45,-87,-31,-43,-68,-9, 
  /* [2][0][][] */ -15,-18,38,84,34,60,-112,127,-27,10,63,-66,-32,-56,-51,55, 
  /* [3][0][][] */ 71,-117,94,-19,-21,-44,-18,127,-12,66,72,63,11,43,32,24, 
  /* [4][0][][] */ -57,-38,-7,31,-113,-10,-11,-127,12,-12,41,0,55,33,99,126, 
  /* [5][0][][] */ 127,34,-18,-8,-61,34,13,77,26,-2,45,74,97,38,-74,-8, 
  /* [6][0][][] */ -2,-62,-67,-80,-108,-18,19,-70,-38,-69,-14,53,120,38,127,11, 
  /* [7][0][][] */ -79,20,-38,-99,-9,-73,-64,-3,-88,42,-74,-58,-127,-55,2,106, 
  /* [8][0][][] */ 52,35,57,20,56,37,55,27,61,-21,26,-4,-127,-18,-61,-2, 
  /* [9][0][][] */ -26,67,19,-30,-15,-8,18,-6,-38,52,-46,1,29,127,17,15, 
  /* [10][0][][] */ 83,57,-88,35,-55,-48,70,-71,-109,-67,-45,-90,-120,-90,3,127, 
  /* [11][0][][] */ 28,-9,73,-2,-25,-31,19,90,-68,28,-19,12,6,-19,78,127, 
  /* [12][0][][] */ -64,-41,11,-1,-1,-12,127,36,-65,36,23,-4,11,70,-19,116, 
  /* [13][0][][] */ -28,44,45,20,66,28,127,115,-27,86,-51,-43,35,82,-106,-15, 
  /* [14][0][][] */ -127,86,-8,-25,-23,-8,69,-21,-33,16,112,9,-68,3,-32,55, 
  /* [15][0][][] */ -14,-26,-127,-50,67,-43,-73,-31,-25,-39,-11,-60,-3,-73,-63,54, 
  /* [16][0][][] */ 127,-6,-2,-1,42,-27,34,-35,-40,3,114,50,29,13,-57,3, 
  /* [17][0][][] */ 26,30,-18,-72,8,-40,86,-127,-11,-18,-55,16,19,80,-8,30, 
  /* [18][0][][] */ 46,127,-14,-49,83,-62,-9,-44,-35,109,-28,-18,-37,55,-26,-34, 
  /* [19][0][][] */ -80,-118,92,-86,16,-127,43,-37,20,40,94,88,48,-18,62,-10, 
  /* [20][0][][] */ 1,96,55,17,22,24,1,-8,75,3,71,-30,-127,-10,-50,-24, 
  /* [21][0][][] */ -91,13,32,-11,63,37,99,44,-127,29,-48,15,-26,5,-98,-18, 
  /* [22][0][][] */ -2,-102,39,5,7,-127,117,2,15,-44,-35,-64,55,-97,-40,-42, 
  /* [23][0][][] */ -65,-98,23,51,20,-19,29,-53,21,-41,74,16,16,58,59,127, 
  /* [24][0][][] */ -19,-23,37,69,33,14,-40,-127,63,18,-18,17,8,0,-26,-10, 
  /* [25][0][][] */ 14,45,2,-36,-12,9,-4,-48,-36,36,-49,-5,22,127,6,-5, 
  /* [26][0][][] */ -77,64,0,10,16,-96,3,-38,1,23,24,80,21,-6,-62,127, 
  /* [27][0][][] */ -8,-126,-68,19,-54,117,-13,-56,38,-30,52,-43,18,-41,-127,-35, 
  /* [28][0][][] */ -44,-7,32,66,12,-2,-27,-127,-124,44,107,-2,80,1,-40,-14, 
  /* [29][0][][] */ -127,94,-25,-33,-39,13,-112,-71,-41,-24,7,13,13,-62,-93,58, 
  /* [30][0][][] */ 33,50,-46,63,-113,-97,-55,-22,-25,-1,18,-88,127,14,-7,92, 
  /* [31][0][][] */ 127,34,-69,-16,-44,43,80,49,-62,-3,40,31,17,34,-8,-8, 
  /* [32][0][][] */ -16,-3,127,16,-6,88,54,31,-35,2,-25,6,-9,81,68,24, 
  /* [33][0][][] */ 13,42,-54,-21,-4,46,81,42,-22,11,8,-73,68,127,-40,25, 
  /* [34][0][][] */ -89,-34,64,28,12,-56,106,-21,-127,15,43,-28,34,39,-65,-20, 
  /* [35][0][][] */ -15,8,-43,8,-90,127,-26,-16,-19,123,3,87,-57,63,39,45, 
  /* [36][0][][] */ 3,-99,127,-39,-42,11,-47,-20,24,24,-72,104,-11,-107,-59,36, 
  /* [37][0][][] */ 89,-29,43,-13,127,-38,-44,29,-36,113,-80,-13,-87,-57,77,-35, 
  /* [38][0][][] */ 25,28,0,-116,-31,-61,-83,37,-104,37,-80,-32,-49,-127,-115,76, 
  /* [39][0][][] */ -64,30,-55,-14,-80,-61,53,21,-127,-17,16,62,35,9,7,40, 
  /* [40][0][][] */ 127,46,-1,-61,-43,37,3,-52,-33,-21,-57,-97,-5,61,18,14, 
  /* [41][0][][] */ 108,-68,-39,-34,10,7,-81,0,54,-6,-18,-75,127,-62,70,-46, 
  /* [42][0][][] */ 7,-85,-56,127,-19,-105,-115,33,-3,11,35,39,-78,101,-55,4, 
  /* [43][0][][] */ -73,-23,-53,-118,-33,15,-17,78,57,-127,-53,39,-33,-34,-42,73, 
  /* [44][0][][] */ -20,64,29,-21,-4,-3,18,127,124,-80,73,119,93,69,-39,-15, 
  /* [45][0][][] */ 43,80,-54,97,127,-69,-45,-44,105,-48,52,-78,-36,21,-53,46, 
  /* [46][0][][] */ -38,-47,12,-34,89,-35,50,1,15,127,-26,-107,41,48,-47,86, 
  /* [47][0][][] */ 87,-31,-24,1,86,1,-51,-46,16,127,-37,26,-21,-91,-71,-1, 
  /* [48][0][][] */ 20,35,0,-127,4,-36,96,-109,18,16,-46,33,39,69,15,24, 
  /* [49][0][][] */ -22,107,-41,2,27,-48,92,66,-15,-5,46,-86,-6,71,127,-63, 
  /* [50][0][][] */ 21,52,-12,-2,-127,5,-82,-53,63,91,21,18,-37,-35,12,31, 
  /* [51][0][][] */ 127,-56,-63,-25,-65,85,-91,-60,45,-34,-38,84,-28,-87,-12,53, 
  /* [52][0][][] */ -33,-62,29,47,-68,-127,-99,-20,-71,-43,-4,-38,46,-69,8,93, 
  /* [53][0][][] */ 9,78,61,-127,-14,93,70,-5,-10,-44,-3,-13,81,-118,9,62, 
  /* [54][0][][] */ 43,127,-10,-4,12,-82,-109,29,-9,-18,-51,101,58,97,1,41, 
  /* [55][0][][] */ -40,-30,41,10,25,-47,105,64,-53,-5,31,23,127,25,3,14, 
  /* [56][0][][] */ 127,32,32,19,-33,107,-54,-81,-28,48,-88,-9,-62,98,-23,31, 
  /* [57][0][][] */ -37,-24,-43,-13,-64,-76,35,-17,-127,-6,47,46,3,45,-5,25, 
  /* [58][0][][] */ 37,-63,77,30,-11,-75,-23,27,36,-1,-127,-26,40,-34,-26,52, 
  /* [59][0][][] */ 87,30,-122,105,28,54,70,-18,-83,-26,18,-101,-127,-43,45,93, 
  /* [60][0][][] */ 4,35,-19,44,-5,-19,-35,5,-28,-89,56,127,-68,-120,-42,-19, 
  /* [61][0][][] */ -35,-8,123,-127,-61,43,-26,119,12,-92,22,96,121,-37,35,110, 
  /* [62][0][][] */ 60,30,-15,-127,-28,-6,19,-47,-13,19,-25,49,28,-30,-90,-59, 
  /* [63][0][][] */ -11,-39,6,-12,-76,-54,-43,5,-54,-11,-20,-7,127,-4,79,-4, 
  /* [64][0][][] */ 6,-17,-13,43,-127,-61,-6,-83,39,118,47,9,60,-62,-32,124, 
  /* [65][0][][] */ -41,-10,-22,-23,-86,65,32,-38,63,-127,102,-47,71,48,-106,63, 
  /* [66][0][][] */ -110,103,-85,-55,51,-23,-116,-41,-122,99,72,-27,-127,-29,22,46, 
  /* [67][0][][] */ 8,-28,-124,-127,78,94,-2,-25,-17,0,40,-17,29,41,28,39, 
  /* [68][0][][] */ 37,9,-13,-52,-78,22,29,27,-53,79,127,-12,1,-57,-108,12, 
  /* [69][0][][] */ 64,-117,58,-65,4,-127,-16,108,18,62,92,98,-3,53,-21,12, 
  /* [70][0][][] */ 25,-11,108,17,72,-25,127,0,65,8,-57,66,-55,31,-79,44, 
  /* [71][0][][] */ 21,47,114,-68,-127,-70,4,20,-36,-5,11,-124,-96,16,19,22, 
  /* [72][0][][] */ -46,-82,33,-106,83,-4,-12,51,-74,35,-127,-40,54,125,-43,101, 
  /* [73][0][][] */ 12,21,60,-20,122,-100,-59,6,-29,116,-89,50,-76,-72,127,-15, 
  /* [74][0][][] */ -68,26,-109,-46,78,-10,-55,41,-84,12,-127,-49,-52,-31,-25,53, 
  /* [75][0][][] */ 85,-12,53,-22,18,17,-127,-4,-8,-72,48,-10,-6,2,7,-23, 
  /* [76][0][][] */ 22,-32,-21,127,58,110,77,-37,99,-101,47,88,16,-60,-87,20, 
  /* [77][0][][] */ -26,-24,127,-9,43,-14,-39,-96,31,28,18,72,31,55,25,-9, 
  /* [78][0][][] */ -39,21,34,-26,13,-49,21,6,43,0,3,-115,-127,-61,-126,-72, 
  /* [79][0][][] */ -125,-98,-45,48,127,37,-2,7,53,45,-10,92,-49,-96,-108,-22, 
  /* [80][0][][] */ -14,-99,26,127,-36,12,-91,56,12,-17,64,45,-114,-3,-54,44, 
  /* [81][0][][] */ 86,36,4,65,-22,25,35,127,29,12,110,58,124,11,87,0, 
  /* [82][0][][] */ -64,12,3,-21,15,-105,-127,-76,-10,60,-48,-39,-36,113,-65,-41, 
  /* [83][0][][] */ 81,-37,97,-50,-49,-22,-101,1,17,-127,25,-55,0,-11,17,-8, 
  /* [84][0][][] */ 28,-46,-69,41,127,50,19,45,-87,35,-110,-37,28,-15,-48,-2, 
  /* [85][0][][] */ 27,92,52,-24,102,36,21,-99,127,-17,17,-29,63,-55,-13,-16, 
  /* [86][0][][] */ 124,-20,127,60,18,-38,57,48,-43,-41,-107,-55,20,23,-59,-5, 
  /* [87][0][][] */ 5,19,30,-68,88,-14,-59,27,52,-30,67,-47,-101,-127,8,11, 
  /* [88][0][][] */ -77,-51,56,-27,15,49,-60,-62,-9,-9,-64,-127,-62,-46,-29,-10, 
  /* [89][0][][] */ -56,5,14,-50,35,4,-127,12,62,35,-75,-19,-22,-63,-53,-30, 
  /* [90][0][][] */ -27,-24,-27,-101,127,18,-69,63,71,70,35,3,48,6,-63,-17, 
  /* [91][0][][] */ -31,-52,-4,86,-18,23,-34,111,-71,-56,11,-82,-37,99,18,127, 
  /* [92][0][][] */ -39,83,16,-28,-37,78,-117,55,-34,-15,68,26,-24,127,72,34, 
  /* [93][0][][] */ 13,79,-52,-64,89,108,-75,24,74,89,75,48,-127,32,-36,69, 
  /* [94][0][][] */ 8,58,98,-7,-127,-27,27,-4,32,-33,33,4,-43,-34,11,-13, 
  /* [95][0][][] */ 30,30,8,23,127,-21,-105,44,25,4,-89,63,-22,7,57,-57, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0011819101637229323, 0.001504727522842586, 0.0015970510430634022, 0.0012502917088568211, 0.001461257110349834, 0.0021094472613185644, 0.0014929852914065123, 0.0016126798000186682, 0.0015685326652601361, 0.0018342798575758934, 0.0010757131967693567, 0.0017448943108320236, 0.0014453914482146502, 0.0013681615237146616, 0.0023249562364071608, 0.0026985872536897659, 0.0025142431259155273, 0.0017864692490547895, 0.0013316284166648984, 0.0013485037488862872, 0.0017768346006050706, 0.0025041953194886446, 0.0018699892098084092, 0.0020393610466271639, 0.0027434872463345528, 0.0016774695832282305, 0.002198120579123497, 0.0010673935757949948, 0.0015095106791704893, 0.002421562559902668, 0.0012196595780551434, 0.0021271016448736191, 0.0028372134547680616, 0.0015680077485740185, 0.0014426218112930655, 0.0020611677318811417, 0.0012005149619653821, 0.0016308510676026344, 0.001707131159491837, 0.0011417277855798602, 0.0017138784751296043, 0.0019670992624014616, 0.0015947857173159719, 0.0018339216476306319, 0.0017614914104342461, 0.0021119718439877033, 0.0014973683282732964, 0.0018200234044343233, 0.00081302504986524582, 0.0012877256376668811, 0.0027364306151866913, 0.001156172133050859, 0.0011750025441870093, 0.0015656765317544341, 0.001244707964360714, 0.0020557167008519173, 0.0020948916207998991, 0.0013853738782927394, 0.0026178336702287197, 0.0012568065430969, 0.0017534252256155014, 0.0014900350943207741, 0.0022898325696587563, 0.0015273350290954113, 0.0013285242021083832, 0.001747777103446424, 0.0013273423537611961, 0.0014087742893025279, 0.0021305789705365896, 0.0018209966365247965, 0.0017032349715009332, 0.0011162583250552416, 0.0015342923579737544, 0.0015253619058057666, 0.0012547605438157916, 0.0012803013669326901, 0.0010098681086674333, 0.0017050091410055757, 0.0015486099291592836, 0.0010902401991188526, 0.00078622781438753009, 0.0018121178727596998, 0.0019800476729869843, 0.0020494349300861359, 0.0024402255658060312, 0.0012871652143076062, 0.0023148944601416588, 0.001540033146739006, 0.0015175767475739121, 0.0017896614735946059, 0.0013046546373516321, 0.0013762856833636761, 0.0018352268962189555, 0.0014999140985310078, 0.0030636948067694902, 0.0020269902888685465, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 13492, 14168, -3830, -1720, 2816, 11431, 601, 1857, 21605, -9226, -10470, 13485, -13718, 4019, 97, 11687, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.5172509999247268e-05, 6.068440416129306e-05, 4.3341948185116053e-05, 5.6296576076420024e-05, 7.1856135036796331e-05, 5.8294543123338372e-05, 5.4081901907920837e-05, 6.0941943957004696e-05, 7.5992844358552247e-05, 6.491116073448211e-05, 5.1548875489970669e-05, 4.6941036998759955e-05, 6.8864668719470501e-05, 5.5282853281823918e-05, 7.6988450018689036e-05, 6.4464169554412365e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -118,33,55,-27,-45,-12,-74,12,-46,35,-5,-70,24,64,43,-42,9,-11,111,16,-7,-85,127,73,25,28,-15,13,-53,-114,-79,2,-38,-61,24,-13,10,27,21,1,-36,-13,-73,24,-93,-1,-26,115,-31,13,-77,-4,-11,-15,23,-55,-104,7,-33,89,92,56,29,-18,-21,-49,-70,25,-60,-109,-8,6,2,22,-93,-58,-70,0,-59,-4,-73,69,71,-95,27,75,21,55,31,-14,4,-6,-67,-33,-79,26, 
  /* [1][0][][] */ 48,7,18,-44,-33,-34,-14,14,5,15,75,-89,3,-12,-45,-31,-6,6,-74,32,-28,-98,29,51,1,-96,-26,-48,78,-103,105,-84,76,16,-24,71,25,97,-16,-33,60,51,-15,-25,20,58,-127,-33,-62,-39,-32,-42,24,-56,-38,72,-3,-7,-46,43,24,44,15,-95,-9,-28,-58,-9,32,-18,-72,20,-46,2,28,-100,1,45,12,-59,-31,-20,-122,-36,25,-66,-35,10,-79,-35,-38,67,-5,73,-72,45, 
  /* [2][0][][] */ 59,-31,39,40,-8,-93,78,-13,-32,-28,-33,19,-90,-42,13,-49,-114,-42,-26,67,25,-35,-52,47,-13,-48,24,-16,-40,27,-44,127,-72,102,-25,8,-23,-13,7,-25,-86,85,92,9,-88,-7,-4,-36,48,-13,-17,-49,68,-5,-15,56,36,-15,62,-31,-10,26,-54,22,87,18,9,-9,38,73,-32,-27,64,52,83,65,45,-62,90,38,99,-6,-35,39,-69,37,22,82,15,31,-43,13,-28,28,-2,20, 
  /* [3][0][][] */ 9,6,-8,-7,12,-4,30,-58,-28,41,21,59,34,-14,-53,35,-7,-16,32,18,29,127,50,-31,4,31,-13,17,42,-41,66,7,-30,42,-15,-34,28,49,12,13,-49,-16,-27,2,-41,11,29,-7,-32,-54,7,-5,44,-57,-15,-48,4,78,-11,-4,-20,-19,-47,19,39,56,-22,0,-9,12,22,-68,-17,-24,42,-5,25,7,-23,-33,-12,-10,-35,25,-25,-32,18,-8,11,32,13,-27,51,21,-23,51, 
  /* [4][0][][] */ 33,23,-54,1,48,11,-29,8,-11,84,102,-28,-8,11,5,-43,15,-2,-34,46,23,-57,60,86,-71,8,-127,4,-51,-49,18,7,-49,-67,7,65,-4,26,17,32,-47,-22,32,-16,-13,6,-66,56,-54,72,2,17,27,-24,-78,25,40,-26,-4,0,66,-1,44,-2,-31,16,-49,3,-50,24,-60,89,33,-54,-36,-62,19,-66,-32,4,-41,83,-106,-1,-36,0,26,-69,49,-8,36,23,-85,-33,25,25, 
  /* [5][0][][] */ -93,50,26,7,52,-39,47,-40,-20,23,6,-67,19,4,-26,-62,11,-17,56,-3,-127,-43,-91,28,-56,-26,28,7,33,-69,-16,55,84,126,-16,27,-29,10,38,-1,-42,110,61,-16,10,90,50,-18,-6,42,-31,12,20,-54,27,-82,16,-39,-92,-77,93,120,-22,-39,75,-68,-96,-80,-47,-52,-74,28,-43,19,-49,-46,9,-56,-59,-10,122,-53,15,-99,-76,16,11,-25,-46,31,52,12,-55,24,9,114, 
  /* [6][0][][] */ 52,-22,-99,17,-43,-89,98,98,-49,78,-7,109,-100,-65,34,77,-20,-77,-18,14,-26,-28,-64,-45,-50,47,88,1,41,50,94,-71,7,3,-1,-53,15,8,44,61,-15,22,-64,-21,-7,-47,-95,30,54,-119,-38,78,23,-6,-39,-48,72,60,-7,6,-92,60,-90,-14,44,11,-16,36,17,13,-18,-86,-41,32,127,11,48,-37,36,-81,-1,-50,-85,49,19,-53,55,17,-67,76,47,38,-34,22,-46,123, 
  /* [7][0][][] */ 25,93,-32,-62,-33,0,52,43,-56,36,-61,-45,-29,13,13,-7,-59,-26,-19,64,9,127,19,30,-1,22,12,40,38,49,64,-15,60,26,-27,16,6,1,-3,36,-59,-1,23,-51,1,-50,60,-19,26,-58,-68,-15,-49,1,7,-20,32,13,-104,-2,-13,95,10,-17,-20,17,-50,7,-47,-4,-84,17,3,44,-41,39,-32,62,1,-73,-29,-64,70,-88,39,-12,-27,7,-18,90,-89,56,48,-33,-35,-2, 
  /* [8][0][][] */ 1,72,-64,34,-20,-38,-97,13,-90,-19,24,-20,-68,59,28,87,20,-60,-1,-4,20,-20,0,-6,-39,70,-1,13,-20,-3,-61,-50,-10,-74,-40,-64,-57,13,44,20,-20,-44,19,22,-30,-21,-14,-19,-36,1,39,66,-16,-35,-85,118,-38,39,-16,-27,-25,22,37,43,-48,-75,-55,-11,-52,-12,-10,23,-36,-35,-125,-25,-65,16,-82,-44,-46,-10,-56,-49,-17,-15,33,16,11,50,-48,3,-112,-127,12,-39, 
  /* [9][0][][] */ -12,28,-52,26,-21,-21,75,62,-24,31,-32,101,-2,-35,30,105,-2,21,69,29,33,26,40,-73,-21,6,35,2,17,-26,58,59,-36,9,10,-127,32,-3,-10,-34,0,21,50,-32,-14,-10,24,16,24,62,33,4,-40,-59,8,-18,12,-11,75,-28,-70,39,-67,-12,57,1,-11,14,-53,40,45,21,8,77,-12,-10,-15,28,-21,-25,56,-9,65,10,39,-1,-18,-19,-39,33,-10,-14,72,24,-31,-14, 
  /* [10][0][][] */ 56,18,-21,-13,-66,-18,76,0,-9,-39,-38,22,-71,-22,-22,-15,-76,-36,20,36,49,55,31,-6,-46,97,54,12,-56,-84,-22,4,49,-17,41,-4,77,-69,74,116,32,-61,21,-6,-30,-107,17,49,38,63,-47,-39,5,38,12,40,9,-62,92,32,-33,29,-85,-1,-15,-46,35,40,6,1,7,15,127,22,33,-65,44,-41,76,-6,-36,25,53,34,-22,14,-7,59,-56,8,10,30,75,52,-17,1, 
  /* [11][0][][] */ -75,-64,39,-46,6,-40,-40,-55,37,-43,13,4,-3,-2,2,2,-49,-39,70,23,-34,14,-77,-115,22,12,-41,22,33,-54,37,-60,31,-17,26,-10,-99,-1,-113,6,-89,37,-52,57,5,4,-5,-49,30,-22,-91,-57,20,23,77,-41,-27,-84,17,-48,-21,-63,-25,-127,-21,-84,54,91,115,17,74,-15,-46,-35,55,-39,76,32,21,39,14,-5,-22,71,71,6,-11,-37,-86,-88,-10,37,80,41,47,77, 
  /* [12][0][][] */ 25,-24,9,-15,1,95,-5,32,21,40,-14,73,21,42,-5,-5,-61,29,18,58,127,7,49,-70,26,31,-52,-53,-25,56,2,7,9,-5,3,-42,42,-11,-19,-30,24,-40,53,45,-34,29,21,-33,-29,9,20,16,2,-27,-1,8,-39,53,22,27,13,-81,-18,-82,-12,90,-6,-34,-9,-25,69,-12,-4,4,9,63,-2,38,-49,-11,-15,31,117,14,0,87,-27,-56,58,18,-84,34,96,-5,1,-57, 
  /* [13][0][][] */ -3,28,-9,-52,-12,5,18,-8,30,-16,-42,-66,71,-105,-21,-63,-27,-34,-78,-10,-98,-19,38,98,-5,9,110,21,10,-46,64,64,9,4,-93,127,-16,-31,42,-63,118,17,8,11,-4,-81,62,-15,86,-18,-23,33,31,9,6,58,64,-50,-27,2,35,30,-11,-62,-10,42,-18,36,-55,-28,-54,-11,-41,6,-38,-82,-78,35,39,79,-1,62,38,-66,61,38,19,3,2,-5,-17,31,-44,28,-8,-17, 
  /* [14][0][][] */ -14,29,-61,-15,77,89,-89,-8,9,-44,70,4,9,-25,-21,-87,-73,25,39,127,12,-23,-11,-14,-7,31,-16,69,21,-24,-29,19,56,7,-22,-15,-10,61,83,-6,59,8,41,-5,1,-31,57,-33,9,-18,-8,-11,51,21,-23,11,23,75,-73,0,-26,-67,-46,-84,-10,-57,-36,13,-64,57,-5,11,10,-31,-32,-7,43,-3,-13,-43,38,11,17,-5,14,68,-5,-11,-14,59,52,12,13,-18,-32,-72, 
  /* [15][0][][] */ -76,-51,38,-57,-13,-37,-31,-102,-18,-3,-11,100,3,-33,2,91,-116,-61,15,-67,39,-12,-24,-80,59,2,73,-60,-65,-125,-78,26,-38,68,63,-100,-3,-38,36,-9,-9,-29,51,6,-9,-18,104,86,-24,-28,33,-64,-28,63,-8,-71,-111,-20,106,1,-43,12,-127,32,-89,-5,14,13,31,-56,103,-53,64,-72,-25,-26,0,-5,80,28,-8,65,61,18,-1,-12,-120,16,-33,-45,-78,23,91,-38,3,83, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0019198316149413586, 0.002579087158665061, 0.0018420327687636018, 0.0023926044814288616, 0.0030538856517523527, 0.0024775180500000715, 0.0022984808310866356, 0.0025900325272232294, 0.003229695837944746, 0.0027587241493165493, 0.0021908271592110395, 0.0019949940033257008, 0.0029267482459545135, 0.0023495212662965059, 0.0032720090821385384, 0.0027397270314395428, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -955, 2464, -1499, -5269, 2125, -1222, -2793, -2092, 524, -2207, 13602, -1695, 2237, 13038, 9084, -3169, 10844, -1523, -5635, 296, 3474, -2650, -1254, -1523, 643, -3345, 3217, -3715, -1240, -10302, -1375, -67, 7951, -3158, -2705, 33, -2276, -1834, -1260, 7996, -981, 2652, 1400, -6808, 17637, 11418, -938, 9849, -2451, 10062, 10357, -4146, -282, 975, -2630, 15288, -3839, -913, 14491, 13447, 9871, 11161, 1852, -5345, -2062, 289, -2162, 37, -5239, -1708, 1139, 2482, 12952, -1937, -1678, 10288, -1101, 4351, 6934, -2223, -2412, 13338, 4, 1863, 17561, -403, -4935, -2899, 3585, -6971, 13573, 201, -3106, 1277, -5390, -4294, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00025041488697752357, 0.00020359452173579484, 0.00013748450146522373, 0.00013959604257252067, 0.00017687995568849146, 0.00027351288008503616, 0.0003431042714510113, 0.00020596137619577348, 0.00020569180196616799, 0.00014031454338692129, 7.7741031418554485e-05, 0.00025876585277728736, 0.00020870656589977443, 0.0001115044578909874, 8.4607840108219534e-05, 0.00017629460489843041, 0.00014746752276550978, 0.0001442391803720966, 0.00015228312986437231, 8.7841632193885744e-05, 0.00016394644626416266, 0.00038716688868589699, 0.00022451569384429604, 0.00022568249551113695, 0.00065623200498521328, 0.00022021272161509842, 0.00022131255536805838, 0.00012945591879542917, 0.00029760960023850203, 7.435532461386174e-05, 0.00042177448631264269, 0.00017263540939893574, 0.00017092848429456353, 0.00014866277342662215, 0.00023041878012008965, 0.0002616408746689558, 0.00016965468239504844, 0.00027979366132058203, 0.00031773632508702576, 0.00010597713117022067, 0.00022112374426797032, 0.00021077714336570352, 0.00025327882030978799, 0.00011490155156934634, 7.6546741183847189e-05, 0.00010042144276667386, 0.00026900699594989419, 0.00010997603385476395, 0.00022022014309186488, 9.2744274297729135e-05, 0.00010057547478936613, 0.00011917344818357378, 0.00015099378651939332, 0.00012990408868063241, 0.00021060885046608746, 0.00012026585318380967, 0.00018094686674885452, 0.00022283685393631458, 0.00016732730728108436, 8.4612016507890075e-05, 0.00011491007171571255, 0.00016836238501127809, 0.00014492047193925828, 0.00012897653505206108, 0.00021162367193028331, 0.00025782358716242015, 0.00027839597896672785, 0.00020600574498530477, 0.0001533571194158867, 0.00017068367742467672, 0.00025712329079397023, 0.00015551333490293473, 9.3919232313055545e-05, 0.00017257669242098927, 0.00026981619885191321, 0.00011395963520044461, 0.00016646709991618991, 0.00011037228978239, 0.00017838650092016906, 0.00022653627092950046, 0.00030154245905578136, 0.00011356814502505586, 0.00024467502953484654, 0.00016762627637945116, 5.8224370150128379e-05, 0.00021917070262134075, 0.00012662564404308796, 0.00021164401550777256, 0.00014806869148742408, 0.00015466027252841741, 8.6293555796146393e-05, 0.00041430100100114942, 0.00022831323440186679, 0.0002086714084725827, 9.3710390501655638e-05, 0.00029016920598223805, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 37,50,-15,-9,-26,8,38,56,33,-83,-127,75,-35,-26,6,-71,-127,44,-7,43,22,52,86,76,19,19,-46,-14,-21,-23,19,-11,-47,-24,-40,127,23,10,4,-34,35,-56,-10,61,-127,-30,16,-25,-7,-72,-44,7,1,38,2,-11,-62,-62,-73,-127,-121,-15,-92,-24,-14,34,0,-2,0,31,48,-11,-52,29,58,-26,-9,-84,-38,19,16,-61,45,-24,-33,-21,-21,-5,-103,6,-111,37,89,-16,43,9, -46,-44,-16,50,0,122,-4,13,45,23,-77,79,-57,-77,-107,89,-79,84,33,126,99,16,46,115,14,56,26,19,41,127,0,-105,108,125,3,86,74,127,-10,-127,127,-28,84,127,-101,-39,127,-31,2,-88,-93,-21,2,127,4,-119,28,39,-127,-120,-15,-127,3,61,-12,79,127,-26,3,127,127,21,-25,55,-31,-105,29,-107,10,127,5,-21,127,-76,-116,-38,66,31,92,127,-127,-2,127,-62,127,29, 21,-39,-9,13,-9,-2,-5,40,-7,50,-69,17,-44,15,-17,-78,-28,41,21,46,14,38,52,58,12,25,45,7,-11,61,-8,-47,-10,-93,-27,50,28,-46,8,-5,-2,13,-15,49,-61,-18,-5,27,27,-13,0,27,-21,-20,-14,23,67,-70,-21,-99,-127,18,-82,-20,43,13,-11,9,-38,-19,28,7,14,-19,8,32,16,-12,-25,5,21,-23,65,-2,-53,-30,9,-39,-127,2,-33,37,38,55,43,4, 
  /* [0][1][][] */ 109,-31,27,127,-23,-41,127,49,-52,-127,-110,127,-20,-127,-67,14,-70,-37,44,-13,-124,8,-127,-64,-17,44,-127,127,-51,85,127,59,16,92,23,86,-127,49,-31,-93,59,-127,7,53,-105,-79,19,-106,-95,-77,-56,49,127,-82,112,-28,-86,16,-64,-35,5,-58,-2,10,-72,-8,97,-75,-44,-11,-32,-127,-81,89,127,-127,127,49,-94,-36,127,-127,-16,94,-89,-12,22,60,-39,13,-39,26,12,-96,71,-1, -127,-17,-65,80,-127,-127,-92,-127,33,30,7,41,-79,-103,-38,127,-45,-127,127,127,52,-127,-93,127,-127,127,-6,72,-50,-7,-84,62,-127,89,127,-19,21,121,127,-83,-29,24,39,34,-67,-127,-76,-127,6,-127,-127,127,59,38,82,-47,25,30,90,-49,-73,-42,-65,127,5,-127,62,127,39,31,-85,-96,-1,89,-109,-121,103,109,127,-28,-50,29,-101,48,-48,-53,127,127,122,113,-118,-127,-71,-82,69,127, 41,-26,63,71,-18,-12,20,43,-58,114,-107,56,-18,-26,-127,27,41,-26,34,11,-127,10,-32,-83,-9,-5,105,-12,127,112,14,-127,-28,-127,-10,95,-110,29,-32,-45,-10,71,17,59,5,22,-18,-71,127,-30,-24,34,65,-121,-127,23,127,5,-120,60,-74,-52,74,51,127,-28,-69,-11,-53,-2,-12,-48,-127,-127,5,-5,-7,-50,-68,-32,-49,-71,-7,127,-127,16,47,-18,-57,-14,30,47,-5,127,54,0, 
  /* [0][2][][] */ 17,-127,45,-40,-26,46,38,85,-26,-34,1,-39,7,-24,1,-13,11,45,2,38,-67,58,49,-32,13,-12,-43,-17,-26,50,-13,49,12,17,-8,1,67,19,10,-7,14,5,-33,-7,-16,-38,-4,28,-3,2,-69,-13,-11,-1,-4,-47,28,9,20,-8,-12,-21,104,-25,-16,62,-29,0,39,48,8,61,-57,-5,22,72,6,-78,-67,5,10,-74,-24,-19,-67,63,-13,-35,-114,88,21,16,-5,-10,-19,4, -47,-10,127,7,124,116,-13,25,-127,23,-123,-38,127,-23,-21,22,37,84,11,-16,21,14,70,1,57,-80,-51,33,13,88,8,40,-66,78,27,-18,97,102,28,-92,-9,-34,-127,27,-4,0,-19,-3,8,-65,-67,63,43,-69,-6,-127,-10,127,-24,-29,38,-69,127,42,-13,26,-15,36,127,28,-9,65,-111,36,-9,-39,-13,-127,-61,-16,14,-76,-55,-61,-26,127,32,5,112,21,31,20,-17,-30,-27,18, 30,59,4,-27,-30,6,-1,58,22,57,-26,-46,-3,-17,-60,30,37,23,6,65,-71,51,36,-85,-16,-12,-26,27,10,46,-17,-74,-24,11,-17,1,61,32,8,-61,0,-37,-1,-16,15,-36,-9,35,2,26,30,-13,-19,-26,34,-43,33,-15,9,16,-71,6,89,-39,40,30,-72,46,30,39,-19,64,-16,-55,-6,-1,-22,-58,-44,11,14,-73,-56,22,-35,33,-19,-24,-110,45,51,14,-8,-5,-14,6, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012032450176775455, 0.0097827287390828133, 0.0066061383113265038, 0.0067075979895889759, 0.0084990924224257469, 0.013142310082912445, 0.016486180946230888, 0.0098964562639594078, 0.0098835034295916557, 0.0067421221174299717, 0.0037354612722992897, 0.012433715164661407, 0.010028363205492496, 0.0053577958606183529, 0.0040654116310179234, 0.0084709664806723595, 0.0070858229883015156, 0.0069307009689509869, 0.0073172138072550297, 0.0042207958176732063, 0.0078776367008686066, 0.018603391945362091, 0.010787992738187313, 0.01084405742585659, 0.031531985849142075, 0.010581234470009804, 0.010634081438183784, 0.0062203649431467056, 0.014300159178674221, 0.0035727778449654579, 0.020266288891434669, 0.0082951420918107033, 0.0082131242379546165, 0.0071432548575103283, 0.011071636341512203, 0.012571860104799271, 0.0081519177183508873, 0.013444102369248867, 0.015267249196767807, 0.0050922073423862457, 0.010625009424984455, 0.010127854533493519, 0.012170062400400639, 0.0055210264399647713, 0.0036780755035579205, 0.0048252562992274761, 0.012925802730023861, 0.0052843550220131874, 0.010581591166555882, 0.0044563678093254566, 0.0048326575197279453, 0.0057262913323938847, 0.0072552603669464588, 0.006241899449378252, 0.010119767859578133, 0.0057787816040217876, 0.0086945081129670143, 0.010707324370741844, 0.0080400872975587845, 0.004065612331032753, 0.0055214357562363148, 0.0080898227170109749, 0.0069634374231100082, 0.006197330541908741, 0.01016853004693985, 0.012388438917696476, 0.013376942835748196, 0.0098985880613327026, 0.0073688188567757607, 0.0082013607025146484, 0.012354790233075619, 0.0074724252335727215, 0.0045128245837986469, 0.0082923201844096184, 0.012964684516191483, 0.0054757674224674702, 0.0079987542703747749, 0.0053033949807286263, 0.0085714822635054588, 0.010885081253945827, 0.014489133842289448, 0.0054569561034440994, 0.011756650172173977, 0.0080544529482722282, 0.0027976843994110823, 0.010531165637075901, 0.0060843699611723423, 0.010169507935643196, 0.0071147093549370766, 0.0074314353987574577, 0.0041464106179773808, 0.019907187670469284, 0.010970464907586575, 0.010026673786342144, 0.0045027900487184525, 0.013942647725343704, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 9605, 4585, 728, -1011, 5924, 9916, 8921, 1498, -47, 10516, 1781, -5742, 5166, 5154, -393, -231, 7503, 10393, -149, 0, 5528, 22425, 14181, -2698, -4971, -1013, 13868, -137, 2867, 2068, 14157, -1004, 6780, 1993, 8374, -5358, 548, -10161, 1015, 1987, 1942, 1621, 2367, 37, 2024, 2538, 3287, 2982, 5079, 2252, 5418, 2470, -3784, 2577, 883, 3982, 1791, 3554, 16994, 1640, -2044, 8552, 6537, 6403, 2557, 6863, -4994, 3113, 5360, -1260, 5245, 942, 3135, 2933, 2921, 4074, -813, 3167, 2153, 2741, 3196, 3510, 10806, 493, 2435, 3651, 856, -585, 17477, -385, 1392, -1871, 9467, 2545, 342, -1220, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 8.2675156590994447e-05, 9.4106202595867217e-05, 0.00013763860624749213, 0.00016314246749971062, 0.00012729149602819234, 8.3332124631851912e-05, 8.5128041973803192e-05, 0.00014028031728230417, 0.00015201210044324398, 7.4439267336856574e-05, 0.00013735881657339633, 0.00010356962593505159, 0.00010530419240240008, 0.00010179767559748143, 0.00011052863555960357, 0.00016954497550614178, 9.8229291324969381e-05, 7.0318346843123436e-05, 0.00011382627417333424, 0.00013432331616058946, 0.00011750964767998084, 4.3549924157559872e-05, 6.3912288169376552e-05, 0.00010397332516731694, 0.00011552273645065725, 0.00014472284237854183, 6.0031765315216035e-05, 0.00015384065045509487, 9.5059236628003418e-05, 0.00011358259507687762, 5.4780975915491581e-05, 0.00018009421182796359, 0.0001053901796694845, 0.00019621315004769713, 8.5794505139347166e-05, 0.00010098089114762843, 0.00019725976744666696, 6.155377923278138e-05, 9.6406620286870748e-05, 0.00015308511501643807, 0.00016981852240860462, 0.00014839939831290394, 0.00013536492770072073, 0.00013292524090502411, 0.00014801434008404613, 0.00012416024401318282, 0.00015117731527425349, 0.00017545429000165313, 0.00011571557115530595, 0.00018981458561029285, 0.00012364497524686158, 0.00016182204126380384, 9.7980919235851616e-05, 0.00014562503201887012, 0.00013981421943753958, 0.00013543189561460167, 0.00017613936506677419, 0.00012219800555612892, 5.4274289141176268e-05, 0.0001056246692314744, 0.00017120660049840808, 7.9036704846657813e-05, 9.5876341219991446e-05, 0.00010369461961090565, 0.00019948917906731367, 0.0001095338593586348, 0.00013136179768480361, 0.00013747588673140854, 9.9492724984884262e-05, 0.00015259291103575379, 0.00012140745820943266, 0.00014422267850022763, 0.00014551333151757717, 0.00011767786782002077, 0.0001630545302759856, 8.7391330453101546e-05, 0.00020426331320777535, 0.00013433961430564523, 0.00015665932733099908, 0.00015789645840413868, 0.00013979079085402191, 0.00010101305815624073, 7.1471047704108059e-05, 0.0001418888132320717, 0.00013894839503336698, 0.00015881357830949128, 0.00017302787455264479, 0.00024770002346485853, 5.5764670833013952e-05, 0.00017970970657188445, 0.00020670644880738109, 0.00013314523675944656, 7.9449891927652061e-05, 0.00013343465980142355, 0.00014800998906139284, 0.00011706985242199153, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -13,26,16,-65,-38,-42,-58,-21,70,-76,71,-19,65,-127,-4,-97, 
  /* [1][0][][] */ -126,34,-47,-100,-34,-25,26,61,-49,-15,104,-69,63,127,-19,42, 
  /* [2][0][][] */ -25,-3,-57,17,-31,-33,8,-41,-60,127,51,22,34,22,-19,108, 
  /* [3][0][][] */ -34,-47,21,-27,-68,-15,-61,-127,-10,27,26,-62,-72,-41,-115,-51, 
  /* [4][0][][] */ 99,32,-3,14,-41,-28,-127,15,-2,47,10,36,28,24,-39,-86, 
  /* [5][0][][] */ -56,56,-44,-38,34,-75,-4,-80,58,-59,25,-45,31,-127,-100,-50, 
  /* [6][0][][] */ -26,-59,-31,26,-96,93,53,-26,-10,-41,104,-32,-12,-1,-127,14, 
  /* [7][0][][] */ -4,127,106,-53,50,95,-21,-44,10,36,-89,11,48,-10,21,67, 
  /* [8][0][][] */ -50,35,60,-22,38,1,78,93,-93,-42,-76,-73,67,127,-63,-57, 
  /* [9][0][][] */ 7,19,126,-14,-104,-58,-89,-126,96,23,127,22,-16,-121,53,-13, 
  /* [10][0][][] */ 14,-127,34,-79,-121,61,33,45,-20,-67,-5,43,-20,37,-125,-2, 
  /* [11][0][][] */ 81,-61,-8,50,-115,-40,67,22,112,127,-27,67,52,-49,-10,123, 
  /* [12][0][][] */ -33,-27,127,-20,73,-32,-6,34,76,2,54,72,-26,-3,-75,12, 
  /* [13][0][][] */ -13,-11,30,6,-4,-9,127,33,-118,-6,21,-3,-6,103,102,-48, 
  /* [14][0][][] */ 127,-125,117,30,67,82,115,92,77,55,106,62,91,-30,65,-93, 
  /* [15][0][][] */ 13,107,0,-59,50,127,-55,68,-27,-34,-41,-12,-35,105,-35,-77, 
  /* [16][0][][] */ -67,94,115,-72,25,102,17,-43,-15,46,-13,108,96,3,127,121, 
  /* [17][0][][] */ 27,104,99,-119,14,-39,-12,-82,-85,95,-47,58,-106,-15,127,-97, 
  /* [18][0][][] */ -84,-27,-66,-104,113,104,-28,-89,67,60,127,97,2,84,-60,7, 
  /* [19][0][][] */ 46,100,99,41,39,-40,11,-35,1,127,30,118,77,32,-46,64, 
  /* [20][0][][] */ 79,-38,11,63,-103,-13,-28,69,-24,-51,-126,-38,127,-55,37,-6, 
  /* [21][0][][] */ -91,-60,-19,100,-38,-3,-127,96,-15,19,68,22,-52,58,-43,-5, 
  /* [22][0][][] */ 29,-6,-41,-34,127,-38,-52,28,50,103,14,91,-6,28,0,41, 
  /* [23][0][][] */ -85,3,-2,18,43,51,121,105,-8,127,-27,-50,-14,39,-87,-33, 
  /* [24][0][][] */ 52,-73,77,-35,127,32,107,-9,60,51,73,41,-47,58,27,14, 
  /* [25][0][][] */ 87,-38,72,-1,7,-6,-19,117,103,-29,-39,26,127,-54,95,62, 
  /* [26][0][][] */ 82,72,96,118,60,26,-96,-30,2,67,7,127,31,-73,-12,-91, 
  /* [27][0][][] */ -28,67,-70,46,-39,103,-7,-43,-6,-71,127,27,20,0,99,79, 
  /* [28][0][][] */ -54,44,-77,-127,7,-111,7,-62,-90,78,-79,26,-25,5,-50,59, 
  /* [29][0][][] */ 102,127,-86,3,34,107,-29,-20,47,58,18,64,-112,24,-29,103, 
  /* [30][0][][] */ -45,116,-101,-49,71,-22,9,24,-79,86,-69,8,0,81,-4,127, 
  /* [31][0][][] */ -11,-117,74,23,40,-70,-45,21,-29,-18,31,-81,-62,76,59,127, 
  /* [32][0][][] */ -38,15,26,51,-69,44,4,70,50,-127,12,-91,19,9,11,48, 
  /* [33][0][][] */ -94,-13,88,60,-8,2,-77,-3,-27,-78,8,-5,1,-24,22,127, 
  /* [34][0][][] */ 20,46,-123,-120,99,0,-46,97,3,6,-21,22,-92,-20,-56,127, 
  /* [35][0][][] */ 104,21,6,10,-36,-4,-127,-18,-52,-112,-53,22,-6,-2,88,-5, 
  /* [36][0][][] */ -26,9,-126,-18,15,127,5,43,-32,-4,65,8,21,25,-34,66, 
  /* [37][0][][] */ 94,63,36,-28,69,-99,37,-49,-127,40,-117,-49,-15,36,91,15, 
  /* [38][0][][] */ -58,107,56,-41,49,8,63,-82,26,9,-127,50,-37,-114,-65,8, 
  /* [39][0][][] */ 77,59,-127,-83,-5,-37,-17,-30,-24,5,11,-23,76,34,-86,-55, 
  /* [40][0][][] */ -49,5,-55,-94,-29,-38,35,-127,19,-33,32,-50,22,48,42,76, 
  /* [41][0][][] */ -44,-86,-14,127,2,0,-43,3,-13,-53,46,-63,-45,7,-17,-2, 
  /* [42][0][][] */ -26,76,-25,-127,1,24,-5,0,78,31,-49,56,101,-30,-6,27, 
  /* [43][0][][] */ -1,29,26,20,127,52,32,16,46,1,-6,-57,-120,-64,-37,-53, 
  /* [44][0][][] */ 53,-52,50,31,-26,-10,22,28,52,-24,17,18,127,-26,-65,-42, 
  /* [45][0][][] */ 16,-60,-76,13,-52,-66,14,59,13,-40,22,33,-65,127,46,-24, 
  /* [46][0][][] */ -8,-84,18,44,-25,-11,-70,58,30,-35,64,0,54,30,91,127, 
  /* [47][0][][] */ -23,-44,8,78,7,-8,42,2,0,-57,-127,-39,22,-21,-58,3, 
  /* [48][0][][] */ -74,121,-26,-49,-1,74,9,-127,7,-3,10,-63,64,-106,-54,-24, 
  /* [49][0][][] */ -34,22,24,-43,-15,-3,127,114,-47,-14,6,6,-19,45,-26,46, 
  /* [50][0][][] */ 27,-2,-74,7,24,-127,-26,11,-82,60,-22,19,36,-59,-79,-20, 
  /* [51][0][][] */ -25,74,-22,127,-30,63,-63,-56,-20,-65,-15,-48,-13,25,4,108, 
  /* [52][0][][] */ -107,-1,39,10,37,27,48,-8,24,-59,-53,-29,-90,-64,-127,-21, 
  /* [53][0][][] */ -100,-72,-77,-123,-19,6,20,77,27,-127,-101,-4,-85,65,77,86, 
  /* [54][0][][] */ 36,-50,35,-25,-30,44,28,-31,16,-105,5,37,-16,-42,-127,19, 
  /* [55][0][][] */ -28,-66,-39,49,83,-23,78,114,-46,-75,-127,-41,63,-42,-30,62, 
  /* [56][0][][] */ 45,-52,-35,-40,-127,14,-87,8,-25,-28,-16,-10,111,-50,37,6, 
  /* [57][0][][] */ -80,-1,36,-35,127,6,84,57,-69,42,23,-33,-28,98,-123,5, 
  /* [58][0][][] */ 51,32,-48,0,25,-34,-77,-97,15,-127,-102,-16,-112,-27,-14,69, 
  /* [59][0][][] */ -120,-77,-12,39,54,96,-127,-81,101,120,-124,-11,-55,1,-39,-18, 
  /* [60][0][][] */ 28,-37,-5,12,-127,-31,30,-11,1,41,-8,67,3,-45,37,34, 
  /* [61][0][][] */ 25,57,-83,-23,-66,-24,-114,-80,-37,33,39,127,94,-43,106,81, 
  /* [62][0][][] */ 72,3,71,-45,42,49,25,127,-68,118,2,127,-15,83,107,52, 
  /* [63][0][][] */ 30,-93,-7,-3,-55,23,31,-11,-20,-10,-10,-13,-45,127,103,20, 
  /* [64][0][][] */ 0,5,-127,-23,37,62,38,4,-33,-85,44,-20,56,-16,-65,75, 
  /* [65][0][][] */ -24,-7,63,59,56,13,91,62,-58,-10,-90,-66,18,127,-52,-10, 
  /* [66][0][][] */ -57,-127,-8,-116,-87,-113,49,-7,-17,-21,46,91,-42,-26,-50,100, 
  /* [67][0][][] */ -7,-34,-84,-13,-68,94,-45,-127,-101,-34,-58,-87,-13,9,-36,8, 
  /* [68][0][][] */ 127,45,27,-14,-74,18,-42,-87,-34,-98,-52,-17,42,-62,50,-42, 
  /* [69][0][][] */ 49,16,31,-18,-9,-27,-50,38,-25,127,-19,12,-4,42,66,-26, 
  /* [70][0][][] */ 32,-16,-39,79,-127,34,-11,-69,82,119,41,77,31,-39,11,33, 
  /* [71][0][][] */ 127,-86,70,88,-51,-48,12,-35,106,22,-73,43,64,-67,19,-2, 
  /* [72][0][][] */ 5,-25,28,111,61,-31,-127,68,57,17,24,-30,-51,-39,-58,70, 
  /* [73][0][][] */ 78,17,53,-127,43,-67,-78,41,-22,72,-47,15,21,-80,23,-27, 
  /* [74][0][][] */ 56,-1,9,37,-127,-31,63,11,-31,-2,20,-34,31,-65,8,44, 
  /* [75][0][][] */ 59,127,-106,-3,42,60,4,-47,-31,-42,56,66,-83,51,72,91, 
  /* [76][0][][] */ -40,-58,-4,-31,-51,-25,88,-7,-33,28,86,46,-45,-127,-17,68, 
  /* [77][0][][] */ -18,127,-25,-4,-58,-64,10,73,9,-56,2,80,-2,65,4,48, 
  /* [78][0][][] */ 79,34,-27,29,-43,21,-127,-20,-29,-27,-88,0,3,-89,2,26, 
  /* [79][0][][] */ -84,-50,75,59,-14,-48,-13,-14,-42,-24,41,-21,-70,127,-50,80, 
  /* [80][0][][] */ 36,54,-1,-127,-38,39,127,-15,36,25,-10,48,93,-39,35,32, 
  /* [81][0][][] */ 32,-84,-18,-112,112,54,-31,127,80,30,-7,-46,-24,26,-101,-56, 
  /* [82][0][][] */ 77,45,114,-24,127,-111,35,43,32,121,-2,79,23,-84,25,-102, 
  /* [83][0][][] */ -23,64,12,8,62,64,127,96,-2,40,-2,-40,-72,90,-47,-95, 
  /* [84][0][][] */ -9,-107,4,119,22,-53,-62,42,-64,43,-58,-10,-127,54,-20,-78, 
  /* [85][0][][] */ -110,30,-57,9,-22,-31,-29,-16,-58,-11,51,-78,-127,-38,-36,60, 
  /* [86][0][][] */ -35,44,72,127,18,-26,87,14,7,22,-32,-100,31,92,-120,-49, 
  /* [87][0][][] */ -5,60,127,-13,-70,-31,-2,0,22,-16,-5,40,-62,7,-21,-23, 
  /* [88][0][][] */ -33,-36,-127,51,54,51,-26,39,-40,-61,-125,-115,106,5,4,20, 
  /* [89][0][][] */ 29,31,13,-119,37,-63,-41,37,127,0,18,-97,2,-34,55,-63, 
  /* [90][0][][] */ 8,52,2,21,-40,38,15,109,3,-45,-11,127,33,10,-23,39, 
  /* [91][0][][] */ -50,6,-10,30,81,35,-18,-101,-36,8,13,-9,-101,-127,-76,0, 
  /* [92][0][][] */ -45,41,14,-41,-127,5,-62,68,-9,76,102,118,24,-47,60,24, 
  /* [93][0][][] */ 91,25,127,65,-100,-76,-8,41,-40,-63,-30,-76,-13,-65,-37,-36, 
  /* [94][0][][] */ -19,-127,17,-81,23,35,-31,-3,86,-14,-8,39,0,65,-54,26, 
  /* [95][0][][] */ -22,-69,-45,-28,102,127,-49,62,83,27,-36,68,-44,106,-42,19, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0012995990691706538, 0.0014792875153943896, 0.0021635883022099733, 0.0025644921697676182, 0.0020009384024888277, 0.0013099261559545994, 0.0013381567550823092, 0.0022051143459975719, 0.0023895301856100559, 0.0011701362673193216, 0.0021591901313513517, 0.0016280463896691799, 0.0016553126042708755, 0.0016001923941075802, 0.0017374373273923993, 0.0026651353109627962, 0.0015440997667610645, 0.001105358125641942, 0.0017892740434035659, 0.0021114740520715714, 0.0018471742514520884, 0.00068457610905170441, 0.0010046591050922871, 0.0016343921888619661, 0.0018159414175897837, 0.0022749477066099644, 0.00094365980476140976, 0.0024182738270610571, 0.0014942686539143324, 0.0017854436300694942, 0.00086112087592482567, 0.0028309624176472425, 0.0016566641861572862, 0.0030843415297567844, 0.0013486330863088369, 0.0015873531810939312, 0.0031007935758680105, 0.00096758484141901135, 0.0015154485590755939, 0.0024063971359282732, 0.0026694354601204395, 0.0023327409289777279, 0.0021278476342558861, 0.0020894971676170826, 0.0023266880307346582, 0.0019517171895131469, 0.0023764078505337238, 0.0027580258902162313, 0.0018189726397395134, 0.0029837603215128183, 0.0019436175934970379, 0.0025437360163778067, 0.0015401955461129546, 0.0022891296539455652, 0.0021977873984724283, 0.0021289002615958452, 0.0027687947731465101, 0.0019208721350878477, 0.00085315608885139227, 0.0016603502444922924, 0.0026912549510598183, 0.0012424049200490117, 0.0015071129892021418, 0.0016300111310556531, 0.00313583854585886, 0.0017218001885339618, 0.002064920961856842, 0.0021610304247587919, 0.0015639601042494178, 0.0023986601736396551, 0.0019084452651441097, 0.0022670854814350605, 0.0022873738780617714, 0.0018498186254873872, 0.0025631098542362452, 0.0013737342087551951, 0.0032108847517520189, 0.0021117303986102343, 0.0024625814985483885, 0.0024820284452289343, 0.0021974192932248116, 0.0015878587728366256, 0.0011234778212383389, 0.0022303988225758076, 0.0021841772831976414, 0.0024964448530226946, 0.0027198842726647854, 0.0038936811033636332, 0.00087658391566947103, 0.0028249183669686317, 0.0032492892351001501, 0.0020929554011672735, 0.0012488999636843801, 0.0020975049119442701, 0.002326619578525424, 0.0018402610439807177, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -28460, -5047, 8380, -12496, 8634, -10755, 20507, -8827, 13200, -9221, 14697, 13140, 982, -34809, -896, 6834, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.4886473410297185e-05, 5.8363777498016134e-05, 5.101707938592881e-05, 4.2632120312191546e-05, 8.3133600128348917e-05, 0.00013021266204304993, 4.7852401621639729e-05, 4.524128235061653e-05, 9.2509108071681112e-05, 9.3613612989429384e-05, 9.4180533778853714e-05, 8.287548553198576e-05, 8.791660366114229e-05, 7.3583658377174288e-05, 6.2565857660956681e-05, 5.6157663493650034e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 19,16,19,26,-19,-83,-13,15,-15,-86,18,-21,71,-52,61,18,-100,-30,54,11,92,9,-71,5,14,70,118,58,21,66,45,-37,27,3,4,-41,33,9,-17,-9,127,31,4,-14,-7,6,12,-33,-1,-31,97,-2,-55,13,51,37,-26,-26,7,27,0,44,-54,-17,38,11,73,47,-3,-27,23,15,11,25,21,13,50,-29,50,17,-20,49,30,58,-49,25,0,66,25,25,-90,-7,9,15,90,75, 
  /* [1][0][][] */ 15,23,-33,-11,-4,-43,69,-43,-46,-43,-67,-43,-1,-35,-33,-58,-31,-23,-8,12,-34,-71,98,-15,13,-6,6,43,-45,2,-15,8,-5,33,10,11,-13,33,-60,78,33,18,-13,-40,40,-72,-8,27,-79,10,56,-81,-48,54,31,63,14,25,-59,25,-37,9,-15,-13,38,17,96,10,-45,-127,10,5,1,57,-20,30,-43,-29,98,-23,31,-13,61,-24,-31,-59,-3,24,-11,-56,24,3,69,-47,-40,35, 
  /* [2][0][][] */ 3,-30,15,-4,75,56,-73,-6,-57,42,28,-14,38,-29,24,34,52,-18,-127,-14,-27,-46,-12,13,-21,5,-26,7,-43,-42,-18,66,-25,-43,-12,4,-68,16,-11,-24,72,-3,17,60,-10,43,-13,-24,-84,4,7,19,-9,64,1,-73,49,27,42,7,-54,-32,-22,52,23,-23,-50,-21,11,1,-35,-33,27,41,32,61,-60,-8,-41,-46,41,10,63,-28,-8,-40,-27,-50,-25,-24,-27,64,-4,7,87,-29, 
  /* [3][0][][] */ 23,-61,-15,-95,-11,-12,127,-25,41,115,-74,1,14,-22,2,56,66,54,-44,47,-36,8,22,-2,-44,86,34,11,-50,-3,-35,88,-13,7,46,-33,14,-49,-12,44,-2,-5,-25,20,75,-32,-13,28,31,-16,14,-55,118,20,29,-17,12,-36,-14,-58,-34,24,78,-20,-43,-34,104,-39,-42,3,-35,15,6,-87,25,-93,0,-62,110,-20,10,-49,-37,-43,-17,-39,51,62,-58,62,-74,23,-4,-71,-7,46, 
  /* [4][0][][] */ -17,79,22,3,-5,2,-37,-26,25,-24,-15,-23,25,39,-27,28,-16,-57,-3,-60,12,-38,-70,16,-26,-56,-25,5,-53,127,-62,-6,25,-24,8,-21,65,49,-42,13,27,20,15,-47,-62,-2,58,-21,23,-15,-52,3,-74,35,34,36,-9,57,-27,32,-17,-43,-13,18,68,33,-41,4,-4,-11,8,-44,-9,56,52,61,-20,19,-43,57,18,52,35,-44,31,-66,-14,-56,-22,-59,-32,-12,-1,-5,20,-47, 
  /* [5][0][][] */ 8,-1,32,-22,-24,-29,-24,-7,36,15,-37,-7,-22,-18,11,-10,-1,3,-45,-38,-32,5,-35,11,26,-56,58,-29,-19,54,7,65,2,-91,7,-7,-27,-35,-36,13,-49,-4,-25,-2,-6,8,-86,15,-9,7,44,-17,10,-63,-5,10,-36,-49,-5,-25,29,16,9,58,-25,-1,115,-31,-20,-36,6,-3,-12,25,24,7,5,0,127,51,-13,-23,-17,27,37,41,13,89,14,-48,6,6,2,-31,-35,12, 
  /* [6][0][][] */ 51,-26,73,31,-31,113,-37,-125,-46,-87,-83,97,29,11,-20,107,-15,47,28,-68,-66,-21,-112,-53,-15,-38,13,52,-127,26,-45,-32,49,84,-25,-23,-28,-36,13,-16,-43,23,53,-27,13,19,-86,10,41,-16,-78,-89,90,10,-38,-15,31,-17,11,-24,-19,-34,47,-4,65,-76,-55,-64,-112,-4,-11,-58,-78,-103,2,-123,79,15,-71,38,-57,72,10,-113,50,-42,-18,10,-74,94,-88,74,49,-52,103,-97, 
  /* [7][0][][] */ -16,-17,-67,37,-15,12,50,-13,-126,23,104,63,-15,-52,19,-40,-17,5,-11,-26,-45,-19,-37,-37,88,45,2,76,1,36,26,32,-65,-127,32,115,-12,27,-35,-1,0,-13,20,-68,39,70,57,73,7,57,-34,10,31,-59,40,-46,-16,58,-80,-35,56,-18,4,-39,53,-73,84,-4,-43,-23,83,14,2,-14,-61,-24,23,-49,90,-44,8,-3,-66,-56,60,39,-99,55,-17,26,0,20,60,4,82,11, 
  /* [8][0][][] */ 0,-41,-2,0,-12,-15,9,7,-15,10,32,29,-2,26,-44,0,64,-7,20,-7,-17,-76,-36,-30,-20,-39,60,-4,-24,55,-2,-33,-3,-10,-9,-15,-42,-27,7,-14,-14,41,19,-41,7,-24,7,-4,41,-10,28,-1,-5,17,-38,0,-24,98,-63,4,-13,-65,-50,5,-64,-30,-10,3,-17,2,24,-34,-12,-127,32,-102,18,20,-43,25,-9,-17,-3,41,50,-59,-30,41,-22,76,19,-16,-50,-12,-8,-55, 
  /* [9][0][][] */ -34,-33,-19,33,13,29,15,22,-32,-12,71,66,-13,54,32,-53,-12,45,-13,-33,10,46,-2,5,-8,30,-7,24,26,-1,23,-2,-25,-18,0,45,-7,-14,38,-15,-19,-33,12,1,20,48,13,28,-55,14,-32,35,120,17,-29,-7,23,6,7,7,-43,-15,77,0,3,12,51,15,41,0,-23,12,0,-121,-27,-123,-41,-22,29,-15,-23,23,17,-30,49,22,-67,-13,-14,127,28,28,34,37,-3,45, 
  /* [10][0][][] */ 11,37,23,14,3,25,-42,-37,54,1,-19,37,20,-10,7,-55,-39,22,6,-28,27,-11,-6,-23,11,-4,-105,54,-5,35,6,-5,6,9,-12,-7,-2,16,16,-10,54,-18,74,-21,-20,6,27,17,20,14,28,-44,-15,-27,-18,32,5,27,-6,-22,-38,-59,-9,-3,-17,-30,-112,-31,-40,-10,60,-23,-39,38,46,13,36,-34,-113,0,-9,39,-2,-20,14,25,-87,-127,-41,38,-8,16,51,-13,15,53, 
  /* [11][0][][] */ 21,-43,-7,9,-41,35,6,22,70,-27,-7,-42,-2,-15,10,-10,-22,57,35,-73,17,36,34,-23,28,15,73,11,54,-71,-18,0,21,97,-111,0,2,-14,70,9,-60,58,-10,41,-33,2,-35,-13,71,-14,-28,-31,-6,9,-85,97,-29,2,8,-45,15,-16,-11,-73,-22,-60,-127,-92,-1,-26,-114,13,49,6,-7,8,40,47,-115,-50,5,0,-21,-31,-36,6,51,79,25,-37,4,-9,-12,49,76,42, 
  /* [12][0][][] */ 13,28,-24,-31,19,-18,0,35,48,-39,42,6,-4,-37,15,22,21,-33,-23,-4,14,43,18,41,-37,-14,-127,-3,87,-29,8,-13,-27,-94,53,-20,9,-9,7,10,-13,-60,19,58,51,10,23,-12,-44,-8,-56,78,81,-24,26,-86,8,25,-37,-45,-9,23,77,-14,-35,-30,24,9,120,30,15,29,-2,-13,-17,-12,-40,-60,33,-87,6,-45,13,-52,11,20,-4,-100,-18,41,-52,5,14,80,15,58, 
  /* [13][0][][] */ -18,19,-60,30,26,23,-6,1,45,62,-41,56,-29,-21,73,-57,26,28,66,29,-24,-31,-27,20,18,59,-7,27,7,52,63,-14,-18,83,3,52,25,-36,-47,-59,16,-20,15,4,52,55,-24,40,-57,53,20,18,-37,-40,59,46,12,-40,-24,-1,30,43,1,-35,14,92,127,59,30,10,-30,-3,24,60,-70,65,13,-75,124,-43,-30,-32,49,20,43,48,-38,-21,-22,-30,5,64,39,8,74,41, 
  /* [14][0][][] */ -15,50,32,34,-82,-42,23,77,-66,-42,89,14,-72,0,84,-37,-43,58,-46,40,-17,12,-112,-4,-36,8,-59,-116,47,4,29,96,-60,49,31,-33,-3,-95,4,-54,29,-19,41,-28,-7,41,-70,38,-27,-41,91,21,-3,41,-39,23,-56,38,-4,44,37,56,6,37,12,-38,-7,-62,55,81,72,26,-53,20,18,-13,22,-17,33,8,-82,127,2,-127,98,3,-2,11,-120,-16,-28,7,-43,22,51,41, 
  /* [15][0][][] */ 80,-18,25,16,42,1,-25,-6,1,21,-31,-12,56,43,6,-3,-16,12,-74,18,-11,-22,22,36,42,-19,85,20,60,-41,-46,39,53,31,-7,-71,44,65,61,58,88,21,-12,33,-46,-109,33,-40,-12,-31,-16,-19,-7,-55,-27,49,-8,14,-12,25,-13,-68,-39,32,31,35,-74,17,6,-45,-17,-6,-1,-127,-66,-94,-11,29,-121,40,61,-26,54,4,-64,19,4,-35,43,87,12,-75,-30,0,26,-29, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.002757675014436245, 0.0024804605636745691, 0.0021682258229702711, 0.0018118650186806917, 0.0035331780090928078, 0.0055340379476547241, 0.0020337270107120275, 0.0019227544544264674, 0.0039316369220614433, 0.0039785783737897873, 0.0040026726201176643, 0.003522207960486412, 0.0037364556919783354, 0.0031273053027689457, 0.0026590488851070404, 0.0023867005947977304, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 14546, 1220, -8456, 3502, 434, -1031, -740, -1355, 4185, -4923, 18, -4354, 8456, -3403, -3137, -7405, -423, 890, -7722, -2033, -2424, -1467, -4122, 1707, 214, 5829, -8372, -5298, 710, -3038, -743, -1364, 15488, -638, -3193, -934, 1547, 12558, 4395, 10375, 683, 5135, 259, 5055, -771, -1385, 5406, 579, -4556, 1128, -4055, 368, -251, -3218, -823, 2431, -108, 803, 943, -98, -1621, -1122, -2192, 11792, 4999, 1212, 14161, 7384, 435, 1632, 6427, -383, -179, -351, -2703, 254, 16049, 14870, 11135, 15065, 11244, -1568, 961, 5306, -210, 222, 14133, -8235, 15799, 231, -6506, -143, 2478, 1476, 15641, 675, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 7.232429925352335e-05, 0.00024534392287023365, 0.00010646429291227832, 0.00022725042072124779, 0.00021599761385004967, 0.00042510981438681483, 0.00011611217632889748, 0.00026669594808481634, 0.00030460624839179218, 0.0002064589352812618, 0.00028065827791579068, 0.00022769095085095614, 8.4507504652719945e-05, 0.00013988435966894031, 0.00022042928321752697, 0.0001505410618847236, 0.00026200161664746702, 0.00038972788024693727, 0.00015072665701154619, 0.0003193678567185998, 0.00024609381216578186, 0.0002562587324064225, 0.00015836523380130529, 0.00016726457397453487, 0.0012444608146324754, 0.00020227106870152056, 0.00024735170882195234, 0.0001609765604371205, 0.00038452996523119509, 0.00019342369341757149, 0.00017659521836321801, 0.00029957824153825641, 6.8407927756197751e-05, 0.00044772340334020555, 0.00014587662008125335, 0.00019366989727132022, 0.00031207094434648752, 0.00010574614134384319, 0.00023342146596405655, 0.00011506236478453502, 0.00042715235031209886, 0.00017880054656416178, 0.00025498797185719013, 0.00016561108350288123, 0.00019340556173119694, 0.00033134513068944216, 0.00020668486831709743, 0.00028173023019917309, 0.00020019296789541841, 0.00042359545477665961, 0.00022445146169047803, 0.00018170777184423059, 0.00015438767150044441, 0.0002629465889185667, 0.00030738796340301633, 0.00028289874899201095, 0.00015979845193214715, 0.00043341176933608949, 0.00043951781117357314, 0.00033698006882332265, 0.00024678482441231608, 0.00030505156610161066, 0.00014592712977901101, 0.00010744876635726541, 0.0003311538603156805, 0.00032613493385724723, 0.00011414045002311468, 0.00016712270735297352, 0.00028985631070099771, 0.00043187127448618412, 0.00018027050828095526, 0.0003426001057960093, 0.00050073704915121198, 0.0002037978993030265, 0.00018017526599578559, 0.00023237240384332836, 6.9017398345749825e-05, 0.00013674655929207802, 0.00012608768884092569, 0.00016320349823217839, 8.0345278547611088e-05, 0.00033996973070316017, 0.00016660742403473705, 0.00044682758743874729, 0.00017093171481974423, 0.00034546019742265344, 0.00012642965884879231, 0.00019092787988483906, 8.454541239188984e-05, 0.00026553054340183735, 0.00014314708823803812, 0.00024034868692979217, 0.00024552232935093343, 0.00016354210674762726, 0.0001226932363351807, 0.00029832951258867979, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -105,-21,20,-19,97,2,13,-7,-4,11,-8,-15,-23,7,7,10,-8,12,-26,-3,-6,12,22,26,-7,10,-33,17,22,6,40,-4,55,3,7,-36,9,-71,-25,24,5,-32,14,-36,-22,28,-21,-15,-26,9,-1,47,-61,-13,27,-23,-13,-17,11,-1,-12,-12,14,-62,-2,-24,-47,-64,-2,11,-14,-19,14,12,-22,-7,-46,-24,127,-84,-48,8,-69,-1,-39,-16,-15,34,-61,-1,33,-31,-19,41,20,7, -70,29,23,-45,-53,9,92,-42,-4,9,-39,27,-44,6,-75,49,-4,74,38,-10,-4,127,8,76,21,29,58,79,127,43,127,-29,-112,-12,-59,-29,-18,-70,127,-89,-23,-96,-29,-34,59,-23,1,-2,19,-23,44,127,-53,30,-88,-21,-127,10,-6,30,-16,-127,-116,-107,-26,-2,-2,-94,-4,9,-48,76,-127,-13,-24,-35,-127,-108,-1,-127,-70,9,56,-44,47,73,-87,34,-116,3,7,-40,-9,108,-39,-113, -51,2,11,2,40,17,37,-33,-24,28,-17,22,14,-10,1,4,-9,-1,-38,-14,-21,3,1,10,-18,13,0,-35,14,22,22,31,-8,4,-17,54,-20,-8,-19,-7,7,-29,-10,-49,-6,-28,-16,-9,-45,-26,7,33,27,4,7,-28,70,-13,11,-8,-10,0,-42,-76,-10,-32,117,-43,-9,26,32,-16,37,13,-28,2,-20,3,-44,-57,-54,2,-53,-33,-12,-8,-26,-10,-83,-41,13,41,4,20,21,-5, 
  /* [0][1][][] */ -124,-23,82,-25,33,115,-29,-19,-15,-15,-25,-7,-76,20,21,85,-8,37,52,28,27,-3,127,-37,19,20,50,21,-26,-22,1,-14,-96,-10,64,-22,-26,-106,-58,-127,-33,-10,81,-27,-52,127,-59,-76,68,47,18,-45,-112,83,64,-27,8,-19,18,-2,19,-5,100,-71,-16,9,-27,-39,-38,-12,-127,21,75,127,-9,-72,-109,-92,-48,-24,-98,-16,11,-41,20,12,-127,72,-66,127,63,-103,123,3,-37,-16, 46,127,127,127,-127,-127,127,-53,127,127,-72,-35,-82,127,-19,127,127,-127,127,127,127,-73,52,-127,-127,-127,127,127,-122,127,-4,127,-77,127,127,-99,127,127,23,-63,127,20,-127,-79,127,-13,127,127,127,-127,127,-115,98,127,-127,127,-125,127,-127,127,-79,118,106,-127,127,127,-16,127,-124,-127,23,-127,0,101,127,73,3,-127,90,-73,59,127,127,127,127,54,-103,127,-127,36,-8,-48,-127,-33,-127,-47, -127,-52,66,-9,1,78,-27,9,-46,2,-5,127,-127,27,32,39,-16,47,56,17,10,-18,72,-38,34,19,34,-24,-12,-4,19,-7,-127,-24,64,127,-23,-89,-65,-83,-37,-20,45,-32,-44,-54,-84,-104,9,31,-3,-35,127,2,104,-35,101,-11,34,-23,3,-20,-121,-70,-49,-13,-58,-78,-39,2,-86,1,25,-67,-16,127,-116,-70,-58,-3,-127,1,-6,-62,-11,18,-94,55,-57,-61,127,127,-60,-45,-26,-25, 
  /* [0][2][][] */ -55,-63,3,-9,27,16,-21,27,-26,5,25,1,7,-9,1,2,8,-4,-27,-10,-22,1,38,-35,-6,-16,-2,14,-5,-22,-38,10,-9,5,-15,-34,-21,-125,-50,21,-43,31,49,14,7,10,-41,-5,-14,-5,-37,-20,11,-32,31,-31,17,-9,1,-26,11,2,-14,-47,-29,-43,127,50,33,6,9,15,22,-17,-9,-6,31,2,-32,-40,-78,0,-47,-8,-19,-20,12,-49,-33,-9,3,-6,-27,-14,-54,-5, -23,-78,58,-72,-43,7,53,127,-71,77,127,14,-68,14,127,67,-2,-40,93,-53,-25,-20,117,-3,0,-32,17,20,-5,7,-87,-55,-68,-29,-63,-10,-114,-106,12,-49,-38,-127,-20,127,14,-10,-16,1,55,-22,-20,-21,47,22,-58,-37,-48,-39,29,-31,127,27,127,-46,-83,-71,-4,-8,127,14,6,12,40,-24,40,-28,15,-38,-15,30,-117,-30,-36,-54,46,-127,-24,-7,-66,-3,19,32,-14,-127,-63,127, -57,-9,7,-22,18,4,-17,22,-38,2,20,38,7,-3,2,-26,5,15,2,-17,-16,11,-1,-31,-19,16,-28,-26,-3,-12,-27,11,9,5,20,-10,-16,-59,-62,18,-42,-26,20,24,8,-1,-77,9,-12,-15,-21,-29,-9,-43,47,-3,79,-2,0,-20,16,36,8,20,-18,-47,-16,36,12,-3,-37,17,-43,-20,-12,-23,18,0,75,-12,-8,1,-10,6,-21,-14,24,22,-31,8,-22,24,-21,-19,-69,-15, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.003213896881788969, 0.010902421548962593, 0.0047309859655797482, 0.010098395869135857, 0.0095983510836958885, 0.018890732899308205, 0.0051597119309008121, 0.01185124833136797, 0.013535880483686924, 0.0091744782403111458, 0.012471696361899376, 0.010117971338331699, 0.0037552854046225548, 0.0062160836532711983, 0.0097952829673886299, 0.0066896388307213783, 0.011642645113170147, 0.017318455502390862, 0.0066978861577808857, 0.014191846363246441, 0.01093574520200491, 0.011387446895241737, 0.0070373238995671272, 0.0074327862821519375, 0.055300481617450714, 0.0089883804321289062, 0.010991642251610756, 0.007153363898396492, 0.017087474465370178, 0.0085952272638678551, 0.0078474152833223343, 0.013312448747456074, 0.0030398636590689421, 0.01989562064409256, 0.0064823636785149574, 0.0086061675101518631, 0.013867591507732868, 0.0046990732662379742, 0.010372620075941086, 0.0051130610518157482, 0.01898149773478508, 0.007945413701236248, 0.011330977082252502, 0.0073593100532889366, 0.0085944216698408127, 0.014724083244800568, 0.0091845178976655006, 0.012519331648945808, 0.0088960351422429085, 0.018823439255356789, 0.0099740177392959595, 0.0080746030434966087, 0.0068605714477598667, 0.011684637516736984, 0.013659492135047913, 0.012571257539093494, 0.0071010123938322067, 0.019259650260210037, 0.019530985504388809, 0.014974485151469707, 0.010966451838612556, 0.013555669225752354, 0.0064846077002584934, 0.0047747334465384483, 0.014715583994984627, 0.01449255645275116, 0.0050720935687422752, 0.0074264821596443653, 0.012880432419478893, 0.019191194325685501, 0.0080107348039746284, 0.015224223956465721, 0.022251402959227562, 0.0090562291443347931, 0.0080065028741955757, 0.010326002724468708, 0.0030669469852000475, 0.0060766479000449181, 0.0056029967963695526, 0.0072523229755461216, 0.0035703273024410009, 0.015107338316738605, 0.0074035846628248692, 0.019855812191963196, 0.0075957444496452808, 0.015351319685578346, 0.0056181931868195534, 0.0084843197837471962, 0.0037569699343293905, 0.011799461208283901, 0.006361070554703474, 0.010680447332561016, 0.010910349898040295, 0.0072673698887228966, 0.0054521565325558186, 0.013256958685815334, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1318, 7533, 874, 2171, 4835, 13466, 245, 2068, 16237, -1489, 14383, 3184, 1648, 1315, 6881, 1114, 5645, 6274, -742, 10324, 1470, 6321, -1767, 3595, -6944, 1209, 3655, 2863, 14648, 1040, 3536, 4553, 2541, 19945, 3020, 3943, 5544, 2056, 4203, 4604, 14958, 1740, 2877, 1409, 2749, 12625, 3697, 8610, 811, -976, 2777, 4225, 2606, -3103, 10760, 593, 2563, 12200, 2194, 2925, 2124, 13549, 3465, -331, 27617, 15327, 1619, 3675, 8496, 6629, 1862, 1636, -3785, 5048, 2605, 3968, 378, 15141, 4723, 9612, 2208, 4904, 4811, 41008, -228, 13224, 5918, 2632, -376, 2827, 1791, 11425, 3516, 2154, 5236, 5699, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0001974984334083274, 9.5015078841242939e-05, 0.0001528961438452825, 0.00021492474479600787, 0.00013134532491676509, 6.4370273321401328e-05, 0.00019144230464007705, 0.00014873679901938885, 5.421727109933272e-05, 0.00015480672300327569, 5.7297933381050825e-05, 0.00012955412967130542, 0.0001472329895477742, 0.00021139722957741469, 7.3767820140346885e-05, 0.00012058137508574873, 9.4947521574795246e-05, 9.4864364655222744e-05, 0.00014197405835147947, 7.9647645179647952e-05, 0.00016565229452680796, 0.00011338842887198552, 0.00018342716793995351, 8.8911241618916392e-05, 0.00010358970757806674, 0.00018729352450463921, 0.00014216126874089241, 0.00014886917779222131, 6.5306827309541404e-05, 0.00022030516993254423, 0.00016874355787876993, 0.00011034734779968858, 0.000150267020217143, 4.1860541386995465e-05, 0.00017104904691223055, 0.00015097633877303451, 0.0001117004212574102, 0.00017327320529147983, 0.00011969078332185745, 0.00011712012928910553, 6.1151469708420336e-05, 0.00013610989844892174, 0.00015507648640777916, 0.00013788242358714342, 0.00012724146654363722, 6.5990803705062717e-05, 0.00016393281111959368, 8.4573053754866123e-05, 0.00025874475250020623, 0.00012887053890153766, 0.00016756485274527222, 0.00015738907677587122, 0.00015421809803228825, 0.00015038609853945673, 7.6836542575620115e-05, 0.00022263245773501694, 0.00012669387797359377, 6.4994143031071872e-05, 0.00012623053044080734, 0.00010871667473111302, 0.00019367069762665778, 6.3472587498836219e-05, 0.00015738864021841437, 0.00013043016951996833, 3.3894844818860292e-05, 6.2653358327224851e-05, 0.0001982339599635452, 0.00015909317880868912, 8.6476473370566964e-05, 8.9251247118227184e-05, 0.00025498008471913636, 0.0001071938022505492, 0.0001444943918613717, 0.00012163535575382411, 0.00015514563710894436, 0.00014997270773164928, 0.00027224121731705964, 5.8547291700961068e-05, 0.00011723887291736901, 0.00010065657261293381, 0.00015941355377435684, 5.8167817769572139e-05, 9.1840025561396033e-05, 2.4651750209159218e-05, 0.00011820294457720593, 6.288944132393226e-05, 0.00012348222662694752, 0.00018102239118888974, 0.00019221464754082263, 0.0001899097696878016, 0.00017143400327768177, 7.2941787948366255e-05, 0.00014666636707261205, 0.00016048867837525904, 0.00011292941053397954, 0.00011117944086436182, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 25,14,14,30,-127,8,77,57,42,96,-46,56,45,3,25,89, 
  /* [1][0][][] */ -16,46,-124,4,127,122,20,-32,-38,4,-65,14,-70,66,-58,-36, 
  /* [2][0][][] */ -28,46,79,10,67,70,-8,21,45,3,26,-26,33,-127,-19,-1, 
  /* [3][0][][] */ 127,-11,16,-7,27,13,5,14,31,29,-45,-6,-43,52,-15,51, 
  /* [4][0][][] */ -85,-29,-12,34,-92,3,-57,-9,-9,25,16,-37,-23,54,-54,127, 
  /* [5][0][][] */ -127,-5,14,27,108,59,41,38,-78,2,3,-7,-79,79,-123,-30, 
  /* [6][0][][] */ -127,39,-65,43,-28,-90,101,43,5,-52,-50,51,33,11,-54,24, 
  /* [7][0][][] */ -13,55,38,-55,83,42,127,-37,8,-8,-19,10,73,37,-31,2, 
  /* [8][0][][] */ 1,-13,-91,33,-26,61,-72,-99,58,-5,59,69,127,50,-125,-13, 
  /* [9][0][][] */ -33,-127,-26,56,-35,-42,9,57,58,45,32,56,-51,9,-9,-42, 
  /* [10][0][][] */ -39,-7,-127,75,-95,65,57,-87,-10,-61,60,-50,-1,122,-89,85, 
  /* [11][0][][] */ -40,-86,-29,54,38,89,-1,-28,16,53,52,-69,44,105,-127,83, 
  /* [12][0][][] */ -51,-117,-111,127,-108,-123,23,61,74,48,-23,84,-7,-41,-30,9, 
  /* [13][0][][] */ -59,-17,-32,-10,-6,7,25,1,-7,127,-15,-19,28,26,11,-10, 
  /* [14][0][][] */ -127,-44,-68,-23,-40,103,-6,-109,93,-81,92,-23,65,-77,-103,-67, 
  /* [15][0][][] */ -9,-127,75,-55,-43,-24,5,45,30,-52,-100,-33,84,-41,-47,-61, 
  /* [16][0][][] */ -23,-54,40,-21,45,9,-34,-35,82,-127,33,-16,-20,28,-69,-112, 
  /* [17][0][][] */ -3,20,40,-43,21,-11,-45,-1,66,-40,42,61,75,-89,-16,-127, 
  /* [18][0][][] */ 84,23,-22,-91,13,-47,108,-70,40,68,-20,33,-14,60,4,-127, 
  /* [19][0][][] */ -53,-3,-58,-67,-114,34,28,-28,10,-66,22,-127,-2,22,-1,24, 
  /* [20][0][][] */ 39,104,89,-121,66,-20,-81,116,-102,-127,43,-80,-54,96,-1,-21, 
  /* [21][0][][] */ 25,-100,-127,14,51,38,66,121,-46,-118,25,57,62,-91,-15,44, 
  /* [22][0][][] */ 25,-35,42,-5,-25,7,53,30,-3,89,47,-1,-20,21,127,18, 
  /* [23][0][][] */ -127,-126,22,80,120,50,-8,48,-2,57,-39,-78,18,106,47,114, 
  /* [24][0][][] */ -13,-18,13,21,30,-65,12,-69,26,123,-127,64,-25,-64,67,-90, 
  /* [25][0][][] */ 119,-78,99,127,46,33,-30,4,-72,56,27,-80,-37,-11,44,-40, 
  /* [26][0][][] */ -12,20,21,46,-49,103,-21,46,-55,-27,-90,39,-1,26,62,-127, 
  /* [27][0][][] */ 46,10,7,-56,-50,5,-80,10,-88,-9,-71,-26,-68,46,-8,127, 
  /* [28][0][][] */ -43,19,31,-2,-5,-31,-127,19,6,-26,26,11,23,-69,-52,-40, 
  /* [29][0][][] */ -17,-127,-31,111,-20,-5,127,14,81,68,-93,66,13,-14,-55,70, 
  /* [30][0][][] */ 53,-39,-27,2,-127,18,27,-9,13,2,10,-16,-8,39,9,67, 
  /* [31][0][][] */ -127,-39,-5,122,-31,28,-42,-44,-1,-80,-9,-55,-8,-81,-56,96, 
  /* [32][0][][] */ -127,-44,-98,-15,-93,-50,17,-3,84,43,-38,-74,48,64,47,3, 
  /* [33][0][][] */ -16,46,-126,26,-127,-78,66,-42,-109,6,-65,-62,-44,83,67,56, 
  /* [34][0][][] */ 15,19,-6,13,-63,-29,45,20,1,-127,-8,31,-4,4,22,88, 
  /* [35][0][][] */ 37,-30,-61,-8,-127,21,76,-13,-3,25,-13,-23,20,44,-2,43, 
  /* [36][0][][] */ -1,23,-66,76,127,-46,15,52,-96,29,-58,-55,-11,-10,8,9, 
  /* [37][0][][] */ -123,74,-4,-71,25,-103,-51,-26,-8,-48,-3,80,70,-90,-3,-127, 
  /* [38][0][][] */ 37,75,9,-72,-97,-43,-127,-49,-48,-50,26,47,-33,-100,63,-21, 
  /* [39][0][][] */ -13,-9,7,39,17,63,83,-54,-19,60,2,-19,-9,127,37,92, 
  /* [40][0][][] */ 84,58,61,66,-49,-60,-18,-4,-48,49,-24,3,-38,-46,127,1, 
  /* [41][0][][] */ -40,-1,-4,41,-115,127,19,46,-74,8,-104,-1,35,46,62,-120, 
  /* [42][0][][] */ -9,-122,20,-32,98,23,86,45,-56,-127,-70,-30,-9,0,17,66, 
  /* [43][0][][] */ -22,-114,-30,42,126,-9,20,66,-98,-43,-113,-97,127,10,-27,50, 
  /* [44][0][][] */ -29,-39,-107,-75,20,65,80,33,-54,-127,-43,64,-24,66,26,125, 
  /* [45][0][][] */ -10,-72,-58,0,-127,68,-21,-82,61,-71,73,-32,4,23,-50,59, 
  /* [46][0][][] */ 36,-61,-3,0,79,-84,-27,75,4,-24,9,54,-37,-70,39,-127, 
  /* [47][0][][] */ -76,-62,7,107,-22,-8,30,79,4,127,50,76,-42,122,14,82, 
  /* [48][0][][] */ 24,-28,-73,-72,39,-41,-2,58,54,-72,-4,22,-59,13,-49,-127, 
  /* [49][0][][] */ 17,10,-18,37,0,-21,58,29,-61,127,-29,-3,-58,-47,84,102, 
  /* [50][0][][] */ 4,0,10,11,-127,-25,-9,-47,57,25,32,58,-25,-64,18,-3, 
  /* [51][0][][] */ 36,24,-3,-127,-31,77,46,-62,5,24,46,-26,65,78,-16,18, 
  /* [52][0][][] */ 9,-40,-11,-68,64,-84,10,-17,18,-13,127,-62,46,35,-34,100, 
  /* [53][0][][] */ -39,-52,63,-47,-47,-127,32,-103,-27,93,-81,88,-7,-12,47,-64, 
  /* [54][0][][] */ 51,31,32,10,-127,-61,-71,-118,-16,6,56,51,-102,-50,88,19, 
  /* [55][0][][] */ 31,30,-14,50,-35,16,36,-34,-5,127,-11,61,12,-17,4,17, 
  /* [56][0][][] */ 33,-127,-78,51,-94,77,-7,107,109,-12,44,39,7,-60,12,94, 
  /* [57][0][][] */ 45,13,47,-53,127,-11,-60,32,116,-12,26,117,11,-42,82,-80, 
  /* [58][0][][] */ 68,-28,-17,-83,9,-4,-8,127,21,64,-9,64,38,8,95,23, 
  /* [59][0][][] */ -24,46,29,-84,6,-74,28,-31,11,30,-127,-121,-126,-69,52,-27, 
  /* [60][0][][] */ 13,-25,11,-2,23,-11,29,-66,6,127,5,76,3,-15,3,-3, 
  /* [61][0][][] */ 38,64,14,-33,-72,-127,-16,-71,-69,-8,-34,26,-58,-24,81,73, 
  /* [62][0][][] */ -40,45,-54,55,-67,127,-23,25,-70,-10,-51,8,-28,34,38,-66, 
  /* [63][0][][] */ -2,0,-116,-127,-41,-79,57,17,-26,-117,3,47,-74,120,63,-7, 
  /* [64][0][][] */ -23,23,27,-1,68,-92,33,59,-127,-6,-95,-56,-59,95,67,50, 
  /* [65][0][][] */ -69,-10,-40,-21,35,42,-13,-79,-127,-73,-15,-58,-117,56,-36,24, 
  /* [66][0][][] */ 1,86,0,47,-30,127,-48,9,-53,34,-42,75,-35,53,52,-99, 
  /* [67][0][][] */ 39,-21,-18,-20,-24,-110,33,-69,9,13,45,127,-37,-29,-13,-96, 
  /* [68][0][][] */ 15,-127,-23,122,-27,-26,34,83,12,58,81,-12,-97,52,5,-4, 
  /* [69][0][][] */ 15,94,33,-127,21,26,-7,68,7,63,72,77,80,-125,14,-113, 
  /* [70][0][][] */ 31,41,34,-32,71,13,-74,-59,-127,-90,10,26,-42,73,-72,11, 
  /* [71][0][][] */ -21,-101,60,-82,78,6,39,57,-74,86,-127,-52,5,59,-37,44, 
  /* [72][0][][] */ 46,35,80,11,-73,-30,-77,-47,-25,45,-4,89,58,127,-82,19, 
  /* [73][0][][] */ 9,-29,-19,-19,22,-127,42,-61,64,61,111,-33,21,-37,-57,127, 
  /* [74][0][][] */ 18,-11,-22,112,-76,-20,83,22,99,81,28,127,125,31,-78,-4, 
  /* [75][0][][] */ -25,65,-46,54,-66,127,-1,7,-60,44,-38,29,-36,66,39,-73, 
  /* [76][0][][] */ -56,66,-38,38,-82,-9,1,-4,48,37,-64,-57,33,-24,-127,22, 
  /* [77][0][][] */ 87,127,-96,94,45,48,110,54,17,-19,114,-39,88,50,80,42, 
  /* [78][0][][] */ 19,-33,17,-69,58,-112,38,-32,32,50,127,-6,33,-3,-26,124, 
  /* [79][0][][] */ -46,58,-10,22,-24,-45,-37,-14,-127,-23,76,15,84,34,-77,-44, 
  /* [80][0][][] */ -116,32,53,11,98,29,-15,-127,-82,73,-35,-59,-7,-86,7,71, 
  /* [81][0][][] */ 100,93,-22,-12,27,-19,89,85,-112,120,-54,-34,-30,6,110,127, 
  /* [82][0][][] */ 74,85,-59,-44,-25,-24,84,-127,42,-16,-94,90,119,-54,27,-77, 
  /* [83][0][][] */ -12,-66,43,14,-13,46,-16,-97,58,-40,122,28,65,-47,-65,-127, 
  /* [84][0][][] */ -127,-100,-33,-13,19,98,108,-12,88,86,74,77,73,99,-92,5, 
  /* [85][0][][] */ 66,10,127,-96,32,17,7,93,-4,70,-61,9,-10,44,115,36, 
  /* [86][0][][] */ -70,79,-24,-21,26,78,39,13,85,41,127,-9,-5,51,0,-4, 
  /* [87][0][][] */ 11,-59,24,-34,49,-127,18,-29,48,-2,55,-41,29,-32,-46,61, 
  /* [88][0][][] */ -103,86,52,-27,119,-12,71,10,-45,-84,127,-71,99,119,91,-94, 
  /* [89][0][][] */ -36,28,-20,14,-32,127,-2,48,-57,3,-45,15,-9,67,28,-68, 
  /* [90][0][][] */ 50,-86,40,24,127,-3,37,44,7,-86,-110,-22,-30,-19,-41,23, 
  /* [91][0][][] */ -41,27,-40,-5,-1,-71,-97,65,-79,14,-91,-127,-117,-63,-22,-8, 
  /* [92][0][][] */ 44,51,64,18,-127,-72,25,10,-36,24,4,-23,-22,-72,36,15, 
  /* [93][0][][] */ 27,-127,-94,23,-51,-72,-39,106,101,55,3,67,-20,7,-20,-31, 
  /* [94][0][][] */ 106,-6,127,-2,32,-53,-5,48,38,91,-11,44,4,0,99,-24, 
  /* [95][0][][] */ -67,-14,-41,-6,127,11,55,52,-55,-15,-96,-68,27,-3,-67,34, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0042081577703356743, 0.0020245143678039312, 0.0032578033860772848, 0.0045794653706252575, 0.0027986136265099049, 0.0013715565437451005, 0.0040791179053485394, 0.0031691789627075195, 0.0011552234645932913, 0.0032985126599669456, 0.0012208640109747648, 0.0027604482602328062, 0.0031371370423585176, 0.0045043034479022026, 0.0015717928763478994, 0.0025692631024867296, 0.002023075008764863, 0.0020213031675666571, 0.0030250833369791508, 0.0016970760188996792, 0.0035296024288982153, 0.002416000934317708, 0.0039083370938897133, 0.0018944581970572472, 0.0022072165738791227, 0.0039907186292111874, 0.0030290724243968725, 0.0031719997059553862, 0.0013915119925513864, 0.0046941074542701244, 0.0035954690538346767, 0.0023512037005275488, 0.0032017838675528765, 0.00089193496387451887, 0.0036445925943553448, 0.0032168976031243801, 0.0023800339549779892, 0.0036919836420565844, 0.0025502869393676519, 0.0024955132976174355, 0.0013029724359512329, 0.002900133840739727, 0.0033042605500668287, 0.0029379015322774649, 0.0027111715171486139, 0.001406085561029613, 0.003492965130135417, 0.0018020231509581208, 0.0055131511762738228, 0.0027458828408271074, 0.0035703538451343775, 0.0033535356633365154, 0.0032859707716852427, 0.0032043210230767727, 0.0016371789388358593, 0.0047436957247555256, 0.0026995041407644749, 0.001384849427267909, 0.0026896314229816198, 0.0023164583835750818, 0.004126599058508873, 0.0013524291571229696, 0.0033535263501107693, 0.0027791142929345369, 0.00072220753645524383, 0.0013349736109375954, 0.0042238296009600163, 0.0033898456022143364, 0.0018425798043608665, 0.0019017027225345373, 0.0054329363629221916, 0.0022840101737529039, 0.0030787847936153412, 0.00259172054938972, 0.0033057341352105141, 0.0031955130398273468, 0.0058007244952023029, 0.0012474844697862864, 0.0024980434682220221, 0.0021447194740176201, 0.0033966717310249805, 0.0012393989600241184, 0.0019568626303225756, 0.00052526214858517051, 0.0025185851845890284, 0.001340004033409059, 0.0026310724206268787, 0.0038570978213101625, 0.0040955743752419949, 0.0040464638732373714, 0.0036527952179312706, 0.0015541922766715288, 0.0031250636093318462, 0.0034195797052234411, 0.0024062204174697399, 0.0023689332883805037, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4736, 12424, -17281, -12, 9691, -16182, -40040, -8327, -4805, 9452, -17235, -11834, 6091, -11642, -1409, -1932, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00013381236931309104, 0.00011494276986923069, 0.00016626506112515926, 0.00011138760601170361, 0.00012372410856187344, 0.00014934589853510261, 0.00011241972242714837, 0.00016382716421503574, 9.3622176791541278e-05, 6.9335772423073649e-05, 0.00020157414837740362, 0.00015754456399008632, 0.00011784321395680308, 0.0001055125831044279, 9.3658600235357881e-05, 0.00013715491513721645, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 24,48,3,-37,64,69,-50,68,-24,127,-10,58,-25,19,-29,43,35,89,33,-47,-84,77,-15,42,50,43,30,53,-44,-36,-15,81,-37,20,-72,55,57,-122,-23,10,8,-44,71,-11,-1,-77,-54,-12, 
  /* [1][0][][] */ -44,5,-88,-49,15,94,-65,15,-18,-31,-57,46,60,-19,-28,-17,-26,-43,0,24,-83,55,-116,-39,-49,-40,58,60,-25,-30,40,-53,17,-63,-46,65,29,-68,127,-31,-28,22,-53,-22,26,48,37,29, 
  /* [2][0][][] */ 11,-14,50,-24,-26,-77,26,-2,102,51,-65,8,93,-38,127,77,-61,-22,-21,44,59,-52,-26,-92,28,-14,36,-67,21,32,-35,-3,38,-19,43,48,-53,12,-12,-28,31,11,41,-4,6,-91,84,-43, 
  /* [3][0][][] */ 25,9,-29,-14,22,98,26,-10,31,-45,38,-6,-40,2,-4,39,-27,-52,38,-125,4,-17,-33,-8,-47,89,127,66,7,-44,28,43,60,-11,97,19,-50,-63,14,40,14,20,-7,-11,19,26,-12,-31, 
  /* [4][0][][] */ 110,-12,24,-59,88,96,40,1,61,-6,-108,18,31,-17,30,-16,-101,-116,-23,-92,-19,36,-42,-17,-68,127,-83,114,-61,-64,19,76,44,-37,27,-22,0,1,-35,39,-34,-10,-6,52,-47,99,-23,-41, 
  /* [5][0][][] */ 8,-16,-53,1,-11,63,32,-36,74,59,37,95,53,-13,42,3,-51,127,-21,37,6,2,-76,-22,42,-1,-84,-48,-10,34,12,-16,-42,-4,33,13,-47,16,-100,7,100,-17,20,58,-25,6,-52,28, 
  /* [6][0][][] */ 65,8,30,55,13,-12,100,-64,-9,64,127,101,43,39,-42,50,23,-51,-84,98,60,-61,-55,57,-82,73,88,-3,114,57,-24,8,99,-77,-120,-6,111,39,-3,-3,22,53,46,-22,80,122,36,0, 
  /* [7][0][][] */ -94,-4,-22,18,-57,-55,22,52,73,121,-59,-65,-90,8,-20,-23,-71,102,-10,127,-57,51,20,32,-21,-96,-34,-83,22,48,-11,3,-29,19,11,-23,16,-51,125,18,2,41,28,-19,58,62,-32,10, 
  /* [8][0][][] */ 4,-100,69,-71,55,-51,77,-44,-19,-113,19,-2,-41,13,42,20,-14,2,-38,85,1,47,-5,40,63,-12,-70,-38,-112,-34,-59,-92,4,-63,3,90,-12,48,100,22,26,-23,67,127,7,-50,-55,65, 
  /* [9][0][][] */ 27,-33,11,-56,35,85,-44,62,3,-42,-29,-3,36,-68,115,-21,22,-127,49,55,-73,34,44,-58,-41,-98,-52,91,68,99,-36,-39,-70,44,-26,120,-10,-37,-53,-41,-42,16,56,107,53,102,-73,-1, 
  /* [10][0][][] */ -14,15,-18,-2,17,15,-55,-42,54,38,59,0,-23,-18,43,-44,-48,127,11,51,2,-12,12,16,-40,48,8,91,27,13,-33,-11,82,13,-14,21,-10,-42,-32,15,-81,6,34,-18,6,43,30,30, 
  /* [11][0][][] */ -25,50,-13,28,42,51,-8,3,18,21,-127,-81,58,25,-3,-35,-17,16,-31,-32,-19,-1,106,12,47,10,-15,27,-22,18,-14,41,31,-4,-52,11,43,71,90,26,32,-42,56,-9,-57,-29,78,12, 
  /* [12][0][][] */ -55,-8,44,12,-51,-58,9,-2,-24,-36,-127,3,66,-84,30,34,34,94,79,-109,-41,51,-37,-88,4,-15,25,-32,-11,16,-19,72,63,77,21,-20,-50,-18,15,-5,-27,9,51,4,15,-8,-35,-33, 
  /* [13][0][][] */ -63,-102,-51,-89,16,36,47,19,-127,34,127,-46,65,30,108,-12,127,29,-11,-85,83,-88,96,-5,-85,-2,-15,20,-39,-79,-97,-1,34,-41,-70,42,31,-62,84,-83,-14,73,64,30,51,-27,110,-50, 
  /* [14][0][][] */ 69,26,-77,15,-46,4,-92,-22,-50,67,66,62,-2,-83,1,-52,66,-119,24,15,100,-72,10,-21,-29,127,-114,6,-75,-14,-90,-9,116,44,102,-35,-67,24,-15,52,-33,-49,96,-38,-73,-44,-74,50, 
  /* [15][0][][] */ -76,11,48,23,105,-5,2,35,33,95,-29,65,69,-28,-41,-25,20,27,3,-34,21,-35,-57,-74,50,-67,-58,77,-51,18,6,8,-71,-8,127,-9,-103,14,62,-19,-60,-5,25,4,-48,-32,-20,3, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0056870258413255215, 0.0048850676976144314, 0.0070662647485733032, 0.0047339731827378273, 0.0052582742646336555, 0.0063472003675997257, 0.004777838010340929, 0.0069626541808247566, 0.0039789425209164619, 0.0029467702843248844, 0.0085669010877609253, 0.0066956439986824989, 0.0050083366222679615, 0.0044842846691608429, 0.0039804903790354729, 0.0058290837332606316, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 11695, 706, 15169, 420, 18219, -698, 38287, -260, 12206, 40576, 1409, 29406, 4040, 9960, 36782, 25113, 618, 5314, 834, 35960, 90, 15563, 3001, 15980, 19634, 29937, 245, -1606, -2409, 19036, 17024, 410, 2973, -1863, 2365, 13011, 9488, 27278, 1920, 13933, 22819, -1105, 1381, 14630, 318, 1261, 45382, 25625, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00010607124568196014, 9.9168151791673154e-05, 8.9627705165185034e-05, 8.6132407886907458e-05, 0.00010405515058664605, 0.00012669834541156888, 5.4159376304596663e-05, 0.00015232998703140765, 0.00011978721886407584, 4.7901125071803108e-05, 8.0616409832146019e-05, 5.6413475249428302e-05, 6.1410988564603031e-05, 0.00012681627413257957, 4.4330332457320765e-05, 7.8079014201648533e-05, 0.00010553863830864429, 5.5572101700818166e-05, 0.00017310866678599268, 5.6965840485645458e-05, 9.5090203103609383e-05, 8.475396316498518e-05, 9.6118936198763549e-05, 0.00015265172987710685, 6.5662636188790202e-05, 7.6098018325865269e-05, 6.8392182583920658e-05, 6.501068128272891e-05, 0.00024850424961186945, 5.9728208725573495e-05, 7.3199553298763931e-05, 0.00037847468047402799, 0.00010015923908213153, 0.000143727011163719, 8.2718368503265083e-05, 0.00010056223254650831, 8.0155805335380137e-05, 5.7882727560354397e-05, 7.7164098911453038e-05, 0.00015103949408512563, 6.9409034040290862e-05, 0.00014619248395320028, 0.00022762130538467318, 9.0003763034474105e-05, 0.00015730476297903806, 5.5379892728524283e-05, 4.3229440052527934e-05, 4.9906739150173962e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -40,88,-79,72,-112,75,-84,117,-101,-75,61,-61,38,-45,-39,-51,72,64,127,-99,97,-127,38,-52,-118,-32,71,107,-77,-93,-51,-23,46,-76,56,-61,-84,-82,83,-28,-28,-98,90,-110,68,55,-127,-38, -97,110,-43,119,-94,105,-50,67,-108,-91,81,-72,60,-34,-38,-117,78,110,104,-127,118,-87,54,-127,-90,-51,102,127,26,-127,-85,127,76,-127,67,-105,-117,-127,112,-42,-97,118,127,-63,-59,111,-121,-97, -37,62,5,46,-59,35,-14,98,-65,-15,60,-39,29,-7,-48,-22,53,43,81,-59,34,-32,11,-20,-110,-37,26,51,77,-52,-28,71,10,-83,20,-20,-53,-44,20,-60,-113,-29,7,4,-71,97,-29,-127, 
  /* [0][1][][] */ -43,41,-23,127,-54,85,-120,127,-77,-65,62,-76,119,-127,-84,-77,127,67,-53,-60,59,-103,76,-45,-127,-86,72,61,-121,-74,-127,9,106,30,96,-111,-86,-92,127,-80,-80,-97,102,-93,127,70,-95,-101, -127,99,-127,120,-119,127,-127,79,-127,-127,127,-127,127,-83,-127,-127,118,127,-44,-79,127,-116,127,-91,-85,-127,127,85,22,-113,-115,22,127,36,127,-127,-127,-101,124,-127,-127,127,121,-127,-76,127,-101,-81, -71,127,-91,0,-127,4,-87,114,-61,-13,59,-74,32,-48,-68,-46,92,53,-26,-31,47,-30,69,-79,-117,-49,45,31,127,-52,-88,45,25,11,23,-52,-50,-26,39,-46,-21,-54,87,-54,-48,96,21,-123, 
  /* [0][2][][] */ -49,20,20,61,-21,13,-88,17,-56,-49,19,-84,45,-66,-16,-68,41,48,-56,17,7,-16,24,-17,-75,-39,23,-6,-112,-44,-10,-78,53,78,34,-46,-29,-3,58,1,-89,-55,33,-41,104,67,-82,-92, -72,47,-55,89,-35,26,-114,-15,-48,-67,48,-87,89,-85,-45,-51,70,53,-73,11,25,21,38,-56,-29,-33,51,22,-14,-83,-3,-55,58,85,39,-18,-38,-12,61,-25,-40,73,20,-116,-34,66,-84,-8, -40,16,-100,19,-92,1,-52,39,-3,1,5,-51,21,5,-46,-25,10,21,-57,1,29,39,33,-17,-57,11,29,18,79,-45,-43,79,-1,73,18,-10,-26,13,12,19,34,-11,15,-68,-43,64,-31,-46, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0045080278068780899, 0.0042146462947130203, 0.0038091773167252541, 0.0036606274079531431, 0.0044223438017070293, 0.0053846794180572033, 0.0023017735220491886, 0.0064740246161818504, 0.0050909565761685371, 0.0020357978064566851, 0.0034261972177773714, 0.0023975726217031479, 0.0026099670212715864, 0.0053896917961537838, 0.0018840391421690583, 0.0033183579798787832, 0.0044853920117020607, 0.0023618142586201429, 0.0073571181856095791, 0.0024210482370108366, 0.0040413336828351021, 0.0036020432598888874, 0.0040850546211004257, 0.0064876982942223549, 0.0027906619943678379, 0.003234165720641613, 0.0029066677670925856, 0.0027629539836198092, 0.010561429895460606, 0.0025384488981217146, 0.0031109808478504419, 0.016085173934698105, 0.0042567676864564419, 0.0061083976179361343, 0.0035155306104570627, 0.0042738947086036205, 0.0034066217485815287, 0.0024600159376859665, 0.0032794740982353687, 0.0064191785641014576, 0.0029498839285224676, 0.0062131802551448345, 0.0096739055588841438, 0.0038251599762588739, 0.0066854520700871944, 0.0023536453954875469, 0.0018372511258348823, 0.0021210364066064358, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1961, -1440, 958, -1478, 5336, -1552, 4402, -2764, 1168, 693, 1577, 3512, 560, -198, 495, 3848, -1817, 5471, 5661, 508, -1466, 3081, -1059, 7895, 1971, 2352, 1469, -810, 12294, -717, 2048, -3011, -1389, 2816, -797, 2572, 2224, 718, 1089, 5460, 2048, 7934, -4125, 2381, 4871, -255, 2167, 3145, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00023206361220218241, 0.00025434291455894709, 0.00019384434563107789, 0.00025089571136049926, 0.00015079630247782916, 0.00015329760208260268, 0.00016219029203057289, 0.00016919354675337672, 0.00026569361216388643, 0.00023854362370911986, 0.0002739011833909899, 0.00020541023695841432, 0.00026974629145115614, 0.00028869183734059334, 0.00024134169507306069, 0.00019351259106770158, 0.00023542522103525698, 0.00014553466462530196, 0.00014571959036402404, 0.00025469696265645325, 0.00020623869204428047, 0.00018792478658724576, 0.0002104294253513217, 0.00011783389345509931, 0.00020494169439189136, 0.00020505752763710916, 0.0001962271926458925, 0.00025765944155864418, 8.1852922448888421e-05, 0.00027808590675704181, 0.00020058464724570513, 0.00013027804379817098, 0.00014474241470452398, 0.00025841491878964007, 0.00022306949540507048, 0.00022185099078342319, 0.00019907130626961589, 0.00028475793078541756, 0.00018024825840257108, 0.00016256461094599217, 0.00026170982164330781, 0.00010376262798672542, 0.00013739756832364947, 0.0001990742894122377, 0.00015722203534096479, 0.00022593775065615773, 0.000231344805797562, 0.00018316339992452413, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 49,29,127,-30,64,104,-56,-39, 
  /* [1][0][][] */ 12,-89,-127,16,39,20,18,-5, 
  /* [2][0][][] */ -127,-10,-62,-42,71,12,-82,-50, 
  /* [3][0][][] */ 33,61,127,-65,-14,-92,-15,2, 
  /* [4][0][][] */ -127,25,-49,-15,55,10,-36,-63, 
  /* [5][0][][] */ -83,24,-54,-33,18,29,-92,-127, 
  /* [6][0][][] */ -21,-118,-127,39,99,-6,-6,49, 
  /* [7][0][][] */ -49,-127,-96,-66,-54,-52,7,86, 
  /* [8][0][][] */ 60,30,-6,-18,88,-60,-127,22, 
  /* [9][0][][] */ -39,48,-41,69,-66,-31,127,-20, 
  /* [10][0][][] */ -19,127,36,45,99,-38,-23,53, 
  /* [11][0][][] */ -78,-46,-17,-11,-72,102,127,-4, 
  /* [12][0][][] */ 70,36,-127,31,-9,-38,-55,-19, 
  /* [13][0][][] */ 79,-39,-55,1,3,-127,-18,-37, 
  /* [14][0][][] */ -2,-83,86,24,127,-91,-46,43, 
  /* [15][0][][] */ -20,-43,-2,127,60,67,-82,36, 
  /* [16][0][][] */ 101,17,-47,37,77,-102,-127,-5, 
  /* [17][0][][] */ 79,127,57,85,44,73,35,-105, 
  /* [18][0][][] */ 41,-27,19,-14,127,17,35,-24, 
  /* [19][0][][] */ 17,127,41,15,-106,12,20,-23, 
  /* [20][0][][] */ -48,20,60,-127,-3,27,-24,118, 
  /* [21][0][][] */ -52,87,38,-127,55,35,-6,91, 
  /* [22][0][][] */ -72,-78,-99,27,-112,127,112,-15, 
  /* [23][0][][] */ 105,27,-127,22,-3,-57,-52,-35, 
  /* [24][0][][] */ -35,38,0,-5,-16,47,-127,95, 
  /* [25][0][][] */ -98,-65,-127,17,-65,-57,66,91, 
  /* [26][0][][] */ 53,2,-46,-49,127,-15,123,-53, 
  /* [27][0][][] */ 127,-60,27,76,16,34,-28,76, 
  /* [28][0][][] */ 32,44,45,-1,127,-71,36,-41, 
  /* [29][0][][] */ -27,-8,-13,-49,-47,21,127,-25, 
  /* [30][0][][] */ 61,-127,-69,-75,-101,-17,-12,-62, 
  /* [31][0][][] */ 18,18,-13,-8,-127,-1,-22,-19, 
  /* [32][0][][] */ 59,-56,-63,93,3,-109,126,-127, 
  /* [33][0][][] */ 32,127,54,31,43,-45,-3,-12, 
  /* [34][0][][] */ -105,-45,127,-14,-25,86,107,6, 
  /* [35][0][][] */ -41,65,127,-10,-52,-58,-29,15, 
  /* [36][0][][] */ -91,16,111,-10,-7,127,68,34, 
  /* [37][0][][] */ -7,-85,-17,-127,-28,-95,46,48, 
  /* [38][0][][] */ 44,-24,70,-49,55,68,-127,7, 
  /* [39][0][][] */ -19,67,-127,-41,-28,-10,21,54, 
  /* [40][0][][] */ 59,-45,10,25,10,-13,-5,127, 
  /* [41][0][][] */ -67,119,127,-10,14,76,-117,-1, 
  /* [42][0][][] */ 80,-111,-127,0,-110,-7,-5,-66, 
  /* [43][0][][] */ -6,-101,17,-56,127,-37,35,22, 
  /* [44][0][][] */ 2,127,99,17,20,52,-65,20, 
  /* [45][0][][] */ -40,58,14,65,-101,48,-127,20, 
  /* [46][0][][] */ -50,-47,57,51,-127,-106,-42,6, 
  /* [47][0][][] */ -15,49,41,-127,-126,46,-13,71, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0031692455522716045, 0.003473509568721056, 0.0026472928002476692, 0.0034264319110661745, 0.0020593944936990738, 0.0020935542415827513, 0.0022149998694658279, 0.0023106418084353209, 0.003628523787483573, 0.0032577416859567165, 0.0037406128831207752, 0.0028052458073943853, 0.003683870192617178, 0.0039426055736839771, 0.0032959545496851206, 0.0026427621487528086, 0.0032151544000953436, 0.0019875373691320419, 0.0019900628831237555, 0.0034783447626978159, 0.0028165599796921015, 0.0025664505083113909, 0.0028737918473780155, 0.0016092335572466254, 0.0027988471556454897, 0.0028004290070384741, 0.0026798348408192396, 0.0035188028123229742, 0.0011178486747667193, 0.0037977625615894794, 0.0027393437922000885, 0.0017791807185858488, 0.0019767177291214466, 0.0035291200038045645, 0.003046414814889431, 0.0030297739431262016, 0.0027186763472855091, 0.003888881066814065, 0.002461613854393363, 0.0022201118990778923, 0.0035741177853196859, 0.0014170651556923985, 0.0018764105625450611, 0.0027187170926481485, 0.0021471492946147919, 0.0030855860095471144, 0.0031594289466738701, 0.0025014253333210945, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 5583, 2283, 22614, -1206, 8550, -16243, 2235, -14099, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.3415601693559438e-05, 9.3847855168860406e-05, 0.00013400621537584811, 9.1844187409151345e-05, 0.00012438959674909711, 0.00012983847409486771, 9.1594134573824704e-05, 7.9607540101278573e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -48,-37,-32,-84,-4,-21,82,96,-118,-106,-44,25,-79,-5,-60,25,-99,1,-9,127,58,-42,33,110,91,85,14,4,-114,-69,-83,-53,-47,93,31,-49,22,-39,114,-17,28,8,-12,-110,15,-56,-36,-87, 
  /* [1][0][][] */ -20,52,-29,-37,-57,58,-33,-55,-38,59,-22,18,52,42,-52,-9,-29,-127,68,-39,123,5,-64,38,54,-1,-87,78,17,-25,61,40,-41,-29,-4,-20,14,118,-18,-32,73,33,-6,13,100,-1,-40,51, 
  /* [2][0][][] */ -29,-36,111,-2,88,-47,-15,23,-26,-2,4,44,6,-41,-54,-127,-49,-93,-28,11,-90,18,-36,-27,-48,14,3,-36,-46,8,-28,-11,-7,4,22,5,31,-22,-53,6,31,-38,36,-36,-35,-52,-59,-60, 
  /* [3][0][][] */ 49,14,66,-1,32,-26,23,67,-61,-45,35,-38,-79,70,-30,49,59,32,-49,33,-123,-63,112,14,10,15,-62,-44,-65,54,118,-67,4,-127,-20,35,0,-75,-12,62,-76,-57,75,-7,-93,-84,50,-8, 
  /* [4][0][][] */ 12,-27,69,-40,10,-14,-15,-5,-77,-8,-29,19,50,-77,45,-115,42,38,-22,-31,12,33,20,27,-4,5,64,-6,20,21,-127,-8,-32,-35,0,16,56,-11,32,-7,-58,-24,-76,28,-14,-122,-5,20, 
  /* [5][0][][] */ 22,-45,56,25,22,11,31,2,-66,-12,-60,21,24,-2,9,-51,86,90,2,-23,99,-56,127,-79,-19,44,13,47,18,19,-39,-61,-16,-44,-26,7,45,32,81,1,-88,25,25,27,55,-2,89,-2, 
  /* [6][0][][] */ -46,49,-116,67,63,7,49,31,-8,0,53,-73,-79,-34,-41,37,-127,38,-3,72,11,53,-95,-75,7,-5,25,69,-13,-27,-40,-1,19,80,-42,-24,-30,1,84,-12,77,47,-112,-55,-38,121,-36,-30, 
  /* [7][0][][] */ 51,75,-79,31,11,68,112,71,31,80,-86,-6,-55,4,-54,-60,36,16,104,91,75,-16,127,11,88,87,-44,95,-69,30,-11,-69,16,-60,-19,25,19,91,-75,78,-34,52,6,-72,88,-20,69,-49, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0035451629664748907, 0.0039885337464511395, 0.00569526432082057, 0.0039033780340105295, 0.0052865580655634403, 0.0055181351490318775, 0.0038927507121115923, 0.0033833205234259367, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -128, 8558, 652, -439, -837, -799, 1011, 608, -4044, 536, -9407, -282, -1529, -724, -733, 3916, 6560, 2362, -388, -3581, -8388, 328, 16188, -4418, -3481, -1197, 3429, -7223, -297, 657, -8992, 8360, 6622, -670, 5582, -1017, -26, -650, 8190, 1625, 7132, -3525, 4177, 4386, -2214, 9325, -1083, 1262, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030054023955017328, 0.00018194256699644029, 0.00093320786254480481, 0.00028075560112483799, 0.00024592183763161302, 0.00032801530323922634, 0.00030764352413825691, 0.00031583290547132492, 8.2917802501469851e-05, 0.00027924016467295587, 0.00015525962226092815, 0.0014123531291261315, 0.00047567504225298762, 0.00063421175582334399, 0.00044755690032616258, 0.00070819404209032655, 0.00019114802125841379, 5.5676591728115454e-05, 0.00024786373251117766, 0.00030485610477626324, 0.00020194095850456506, 0.00027865753509104252, 9.9126533314120024e-05, 0.00045863250852562487, 0.00021190514962654561, 0.00043053444824181497, 0.00056095293257385492, 0.00018505752086639404, 0.00033938759588636458, 0.00043512671254575253, 0.00011821740918094292, 0.00014661384921055287, 0.00013793530524708331, 0.00020227745699230582, 0.00011499541869852692, 0.00029988636379130185, 0.001719930674880743, 0.00045305842650122941, 0.00019592410535551608, 0.00018088075739797205, 0.00023441755911335349, 0.00012965427595190704, 0.00032893175375647843, 0.00019656939548440278, 0.00027738267090171576, 7.7474789577536285e-05, 7.8984397987369448e-05, 0.00021163737983442843, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 9,-50,4,-4,-9,-96,-31,48,-26,-9,-2,13,51,-13,-25,-1,107,55,32,3,9,-20,-85,18,-3,-23,15,-16,-60,68,5,-127,27,5,-66,-39,-8,-24,-2,-18,-25,14,4,-7,-4,98,127,-29, -127,-95,-30,127,-53,39,-90,127,40,19,32,6,59,8,-15,-43,-25,97,19,10,15,113,-2,127,102,-39,-22,24,79,-120,14,-56,45,-14,-55,-108,25,10,-59,-61,-123,10,-100,-123,40,93,51,126, -10,-1,6,8,-15,41,41,48,9,-41,-4,9,-23,1,-12,9,-76,55,-81,-19,13,-36,127,21,-33,8,22,15,22,29,9,12,-22,-5,-51,70,2,7,17,69,19,-7,5,-39,1,27,-26,-35, 
  /* [0][1][][] */ -20,-15,-36,-5,35,-96,127,-98,-17,15,27,53,127,12,-13,-30,-19,-35,24,30,72,-67,22,11,-50,127,-77,-27,127,-89,33,-126,-55,13,-97,22,19,-50,-44,8,101,127,12,-127,-52,-48,0,89, 100,-127,127,1,127,37,-69,-50,24,127,127,-127,-81,127,127,127,127,127,125,127,127,127,-17,4,127,-114,-127,101,37,127,127,-18,-127,127,127,127,-127,127,-127,-127,29,40,-127,-33,127,-127,-7,92, 29,40,-46,-3,-38,127,-111,92,99,-81,29,74,-38,16,1,-58,-2,3,-127,26,30,-111,-30,-2,90,-2,-26,127,-70,-36,23,-37,-51,17,92,-28,33,5,8,-99,88,11,18,47,-46,86,68,-100, 
  /* [0][2][][] */ -4,34,-1,-40,10,-47,-15,-5,23,-2,12,12,-5,-23,-11,-6,-50,46,10,-40,12,-23,61,-20,-104,3,45,-23,16,-10,-16,38,-21,4,-86,48,7,-8,36,58,-41,16,16,19,-12,41,-6,17, 39,-10,-40,-38,35,38,114,-101,127,-36,15,21,-60,-38,-36,-73,-19,105,24,16,7,48,-22,-42,-52,67,64,11,-91,10,-23,-6,-26,9,-54,19,71,-14,26,106,-127,7,-8,82,34,77,-4,-127, -8,32,0,-21,-2,12,-5,-61,-6,-23,4,15,20,-20,-29,13,20,52,-6,-11,1,-19,-46,-17,25,-8,18,6,-13,-4,-17,31,10,-2,-41,-52,3,12,50,-4,-19,0,1,21,-11,27,45,-64, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012772959657013416, 0.0077325589954853058, 0.039661332964897156, 0.011932112276554108, 0.010451678186655045, 0.013940650038421154, 0.013074849732220173, 0.013422898016870022, 0.0035240065772086382, 0.011867706663906574, 0.0065985335968434811, 0.060025006532669067, 0.020216189324855804, 0.026953998953104019, 0.019021168351173401, 0.030098246410489082, 0.0081237908452749252, 0.0023662550374865532, 0.01053420826792717, 0.012956384569406509, 0.0085824904963374138, 0.011842944659292698, 0.0042128777131438255, 0.019491881132125854, 0.0090059684589505196, 0.018297713249921799, 0.023840498179197311, 0.0078649446368217468, 0.014423972927033901, 0.018492884933948517, 0.0050242398865520954, 0.0062310881912708282, 0.0058622504584491253, 0.0085967918857932091, 0.0048873052000999451, 0.012745169922709465, 0.073097050189971924, 0.019254982471466064, 0.008326774463057518, 0.0076874322257936001, 0.0099627459421753883, 0.0055103069171309471, 0.013979598879814148, 0.00835419911891222, 0.011788763105869293, 0.0032926786225289106, 0.0033568369690328836, 0.008994588628411293, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 4810, 6221, 24106, 2062, 2267, -2009, 6832, 15218, 5230, -851, 7372, -3209, 20337, -2471, 2656, 25032, -315, 3627, -88, 3879, 4765, 6195, 667, 27946, 7327, 4432, 12396, 2331, 9553, 6084, 861, 1310, 943, 1688, -95, 235, -2840, -1101, 3981, 2630, 6945, 2626, 6720, 7805, 3321, 3585, 2260, 7918, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00013535318430513144, 0.00013466671225614846, 4.2788477003341541e-05, 0.00014343281509354711, 0.00021708867279812694, 0.00020119876717217267, 0.00010461029887665063, 6.1341619584709406e-05, 0.00010507544357096776, 0.00019226330914534628, 0.00011610534420469776, 0.00017208086501341313, 4.4684042222797871e-05, 0.00017099299293477088, 0.00019115880422759801, 4.254884333931841e-05, 0.00024577038129791617, 0.00014442994142882526, 0.00023770605912432075, 0.00015301996609196067, 0.00014823167293798178, 0.00013012217823415995, 0.00027991208480671048, 4.0124414226738736e-05, 0.00011211593664484099, 0.00013316769036464393, 7.7975026215426624e-05, 0.00018262228695675731, 8.8806678832042962e-05, 0.00013782405585516244, 0.00038627197500318289, 0.00029235461261123419, 0.00024389743339270353, 0.00023361168859992176, 0.00026311815599910915, 0.00019744430028367788, 0.00015905749751254916, 0.00018948642536997795, 0.00015018098929431289, 0.00020231821690686047, 0.00011684476339723915, 0.00018982504843734205, 0.00013216497609391809, 0.00010843635391211137, 0.00019884920038748533, 0.00018657444161362946, 0.00030906096799299121, 0.00010866053344216198, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 69,127,-105,-99,-8,75,-3,62, 
  /* [1][0][][] */ 83,-90,48,-127,-55,87,-109,-71, 
  /* [2][0][][] */ -51,118,127,31,114,-16,44,17, 
  /* [3][0][][] */ 126,35,-127,84,-34,-103,-119,-38, 
  /* [4][0][][] */ -42,30,12,-57,-25,127,101,55, 
  /* [5][0][][] */ 12,84,-127,-66,45,81,20,-17, 
  /* [6][0][][] */ -22,127,47,32,106,18,17,-121, 
  /* [7][0][][] */ 95,-6,-16,31,16,28,127,42, 
  /* [8][0][][] */ 60,127,47,70,124,61,67,-61, 
  /* [9][0][][] */ 45,127,-92,-89,7,90,20,82, 
  /* [10][0][][] */ -88,-40,43,-49,-2,-13,-44,127, 
  /* [11][0][][] */ 4,-127,-102,-14,33,-15,51,1, 
  /* [12][0][][] */ -28,-93,-127,-41,-109,59,-71,52, 
  /* [13][0][][] */ 4,11,-120,107,-127,-37,-9,-14, 
  /* [14][0][][] */ -49,-28,-127,-10,42,-14,-22,-51, 
  /* [15][0][][] */ 11,-113,-127,39,-92,-13,-13,-21, 
  /* [16][0][][] */ 127,-47,-20,61,-71,10,17,82, 
  /* [17][0][][] */ -12,122,127,-21,-39,-21,-45,-18, 
  /* [18][0][][] */ 3,-127,32,53,-20,-82,53,-67, 
  /* [19][0][][] */ 127,-38,-48,35,-103,23,30,108, 
  /* [20][0][][] */ -30,-127,68,67,-24,-93,3,-88, 
  /* [21][0][][] */ -10,-73,-23,-53,127,-19,60,34, 
  /* [22][0][][] */ -127,10,-82,64,57,40,-108,-125, 
  /* [23][0][][] */ -103,-57,55,-7,-125,118,127,-45, 
  /* [24][0][][] */ -59,82,4,-43,-53,106,127,26, 
  /* [25][0][][] */ -21,-82,-127,-56,-51,4,-16,-27, 
  /* [26][0][][] */ -3,63,-8,127,-73,9,-38,13, 
  /* [27][0][][] */ 16,-127,39,81,3,-48,4,-127, 
  /* [28][0][][] */ 23,87,65,52,127,-25,18,-53, 
  /* [29][0][][] */ 69,1,-19,-21,58,-127,-100,5, 
  /* [30][0][][] */ 23,-13,24,-127,10,-38,26,-32, 
  /* [31][0][][] */ 45,-65,-5,87,-27,42,32,127, 
  /* [32][0][][] */ -82,-66,4,-69,-93,127,73,98, 
  /* [33][0][][] */ -30,28,35,-39,37,127,-105,55, 
  /* [34][0][][] */ 32,127,-43,-29,29,56,-65,61, 
  /* [35][0][][] */ 31,-127,26,88,-56,-109,23,-66, 
  /* [36][0][][] */ -29,-29,-74,-17,-127,-61,-22,26, 
  /* [37][0][][] */ -55,-127,73,86,-54,-100,-5,-43, 
  /* [38][0][][] */ -70,13,44,-81,-127,-83,-55,80, 
  /* [39][0][][] */ 42,-127,57,26,-15,-67,-1,-79, 
  /* [40][0][][] */ -1,84,44,55,-127,5,-73,16, 
  /* [41][0][][] */ 116,127,-63,-92,73,41,-9,10, 
  /* [42][0][][] */ -12,-38,-20,10,127,21,62,23, 
  /* [43][0][][] */ 127,35,99,39,-71,-20,72,119, 
  /* [44][0][][] */ 45,47,9,30,73,-127,-111,28, 
  /* [45][0][][] */ 64,26,38,27,109,-127,-15,-52, 
  /* [46][0][][] */ 65,-26,-7,127,42,43,9,56, 
  /* [47][0][][] */ -76,-91,43,48,-46,41,127,-89, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0024800496175885201, 0.0024674714077264071, 0.00078400480560958385, 0.0026280910242348909, 0.0039776726625859737, 0.003686525160446763, 0.0019167537102475762, 0.0011239503510296345, 0.0019252764759585261, 0.0035228023771196604, 0.0021273752208799124, 0.0031530035194009542, 0.00081873685121536255, 0.0031330706551671028, 0.003502564737573266, 0.00077961402712389827, 0.0045032021589577198, 0.0026463612448424101, 0.0043554408475756645, 0.0028037545271217823, 0.0027160195168107748, 0.0023842027876526117, 0.005128773394972086, 0.00073519168654456735, 0.00205427804030478, 0.002440005075186491, 0.0014287208905443549, 0.0033461519051343203, 0.0016271871281787753, 0.002525322837755084, 0.0070775849744677544, 0.0053567555733025074, 0.0044688843190670013, 0.0042804204858839512, 0.004821061622351408, 0.0036177327856421471, 0.0029143788851797581, 0.0034719221293926239, 0.0027517364360392094, 0.0037070366088300943, 0.0021409234032034874, 0.0034781266003847122, 0.0024216326419264078, 0.0019868577364832163, 0.0036434745416045189, 0.0034185664262622595, 0.0056628626771271229, 0.0019909653346985579, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 8122, 12824, -3299, 8293, -704, 5307, -12429, -19101, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0002181055024266243, 0.00014041532995179296, 0.00017320315237157047, 0.00013612366456072778, 0.00019763011368922889, 0.00018476616241969168, 0.00015346832515206188, 9.5091912953648716e-05, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -34,-4,34,16,-40,-12,12,-4,-50,-7,-75,-56,-27,-59,-14,-26,48,-46,29,45,-27,26,-40,9,5,-38,49,-18,-1,-23,17,12,79,38,36,-127,17,-5,-12,-32,-3,-13,39,56,39,-4,28,6, 
  /* [1][0][][] */ 13,24,62,-31,-14,51,-39,-33,10,20,-13,-78,20,83,-22,62,-28,12,-23,-49,10,-86,-37,30,-74,0,2,-103,-19,-14,31,-59,39,69,-40,14,127,-29,0,40,-44,43,-74,-32,120,-21,-29,-38, 
  /* [2][0][][] */ 7,-28,-60,7,-11,55,27,-4,-1,32,0,36,66,-91,11,-60,17,-85,30,33,-12,44,-2,24,-30,64,-29,-58,13,1,32,-70,-56,-91,27,-20,89,14,-19,-61,-15,28,82,15,127,24,11,14, 
  /* [3][0][][] */ 0,37,-64,33,5,-39,-62,-110,5,-31,-45,0,5,24,27,72,-17,20,-45,31,-3,-103,35,-64,-73,-7,127,-11,-45,-7,-60,28,10,-75,20,-9,-14,-45,-31,114,-59,-36,-2,23,40,-7,-45,34, 
  /* [4][0][][] */ -21,-47,-5,10,22,-31,-6,0,28,-31,55,-72,9,22,5,7,-17,-26,6,-8,-3,-55,8,-14,12,-10,36,53,35,18,-10,21,-18,-5,2,5,-75,79,40,-26,31,-18,-23,-25,-75,16,127,12, 
  /* [5][0][][] */ 40,-14,-1,21,26,-33,31,-127,34,-24,-14,103,-77,60,13,-57,-1,-88,20,7,-44,57,-33,-50,-49,63,-15,-1,-24,48,-47,-36,23,39,27,6,-31,1,-40,-42,20,-36,-46,-1,-34,53,83,25, 
  /* [6][0][][] */ 53,-28,16,-6,-31,-12,-31,13,-30,12,-39,127,-37,-29,3,60,15,36,22,29,30,-82,-26,21,17,42,-64,0,9,-36,8,28,-1,16,-8,6,17,7,2,-13,-3,-11,36,61,4,-32,75,-4, 
  /* [7][0][][] */ -24,12,-17,69,23,44,5,29,20,8,84,-1,121,119,61,48,54,57,-21,-7,29,-13,-86,-33,24,-1,-35,62,27,-33,-44,-13,36,0,33,-102,-77,45,42,64,-29,41,86,127,-68,-35,-119,56, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0092694833874702454, 0.0059676514938473701, 0.007361134048551321, 0.0057852556928992271, 0.0083992797881364822, 0.0078525617718696594, 0.0065224035643041134, 0.0040414063259959221, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 6630, 4863, 4807, -1924, 3968, -1666, -423, 34789, -1072, 1674, 3336, 66382, 852, 4446, 109, 12274, -1881, 12928, 15, 7162, 12319, -32, 4691, -6074, 13838, 699, 3413, 12906, 3901, -204, -6846, 9651, 3935, 2289, 1705, 4356, -11277, 16797, 2214, 25777, 1042, -1479, 5678, 1218, 28, -435, 410, -1440, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.3348236987367272e-05, 0.00011202346649952233, 0.00015559543680865318, 0.00015474425163120031, 0.00083725276635959744, 0.0001599651004653424, 8.9717854280024767e-05, 0.00010531975567573681, 0.00011533100041560829, 9.7462514531798661e-05, 9.8673561296891421e-05, 3.8372705603251234e-05, 8.9326204033568501e-05, 5.77128266741056e-05, 0.00021913470118306577, 0.00011267359514022246, 0.00013799636508338153, 0.00027651374693959951, 0.00014391944569069892, 0.00015278882347047329, 0.00015448660997208208, 0.0003836482937913388, 0.00011796389298979193, 0.00028592674061655998, 9.6720010333228856e-05, 7.5445001129992306e-05, 6.1453334637917578e-05, 8.9754008513409644e-05, 0.00018251987057738006, 0.0011130472412332892, 0.0002890216710511595, 8.4364030044525862e-05, 0.00010908747935900465, 0.00017108258907683194, 0.00018605841614771634, 6.5276013629045337e-05, 7.1585418481845409e-05, 3.746127913473174e-05, 0.00015062322199810296, 5.4369924328057095e-05, 0.00019801886810455471, 0.00019316031830385327, 7.995164196472615e-05, 9.0142777480650693e-05, 8.1791222328320146e-05, 0.00045517535181716084, 7.5024952820967883e-05, 0.00017611561634112149, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -2,-76,-13,-15,127,-49,84,-55,-95,-48,-20,-40,127,60,58,-92,57,-39,-3,-36,-63,75,-7,-14,7,86,75,-54,50,-83,-2,-60,-127,-78,31,74,44,84,94,-96,-115,-12,33,84,43,-127,73,78, -52,-103,-69,67,-78,124,100,-95,-94,17,55,-116,105,101,91,-61,-74,-79,20,-64,-119,52,-94,98,-50,76,94,-98,58,-62,26,-109,-47,-63,59,127,104,92,90,-84,-127,-66,66,105,87,116,71,90, 11,-50,-50,119,-70,-19,56,-15,88,23,37,-72,-6,75,-36,-27,-65,-29,40,-20,-68,35,-53,-8,-45,45,6,-92,12,49,72,-72,28,13,-17,35,88,59,21,-22,-42,67,53,37,12,29,28,-114, 
  /* [0][1][][] */ -67,-109,-40,-65,-81,-81,87,-110,-127,-127,84,-72,83,61,-113,-73,127,-127,-66,-57,-97,127,-77,-9,-17,127,78,-33,-117,-80,-9,-35,-100,-127,-127,72,52,65,-27,-109,45,-10,61,123,70,105,120,-111, -127,-127,-114,-108,-34,127,127,-127,101,56,127,-127,108,127,44,-127,55,-97,-127,-127,-127,125,-127,127,-127,123,127,-127,-127,127,-21,-127,-96,-73,37,118,127,127,-25,-127,77,-92,127,127,127,-6,127,127, -24,-97,-127,127,44,-32,60,-15,81,20,5,-39,10,57,80,-76,-18,-6,-18,-55,-33,47,-82,-5,-120,70,4,-82,-63,45,127,-52,-27,1,44,71,61,74,-37,-47,24,127,64,10,51,-47,37,30, 
  /* [0][2][][] */ -87,-47,15,43,-53,-9,69,-57,0,-49,28,-11,4,38,-45,-30,-69,-11,103,-44,24,49,-98,-19,-7,91,41,-19,13,49,-23,-14,14,-73,-49,30,32,-9,-82,-84,17,10,32,29,24,49,0,-84, -66,-44,-74,-60,75,36,35,-41,120,44,-31,-31,24,34,-127,-71,40,11,59,-46,-6,-25,-52,36,-37,81,38,-20,23,-1,-29,-31,-82,-37,-69,74,57,9,-127,-72,12,-10,70,81,49,-111,8,6, 6,-13,-56,-24,-44,-18,53,-43,-59,6,-5,11,-2,-8,13,-10,42,31,4,-19,-1,41,-15,-21,-59,24,-2,-12,-1,-60,60,-31,-86,7,13,63,26,29,-86,-39,-8,42,21,15,35,-10,-6,51, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039673000574111938, 0.0047609973698854446, 0.006612805649638176, 0.0065766302868723869, 0.035583242774009705, 0.0067985164932906628, 0.0038130087777972221, 0.004476089496165514, 0.0049015674740076065, 0.0041421568021178246, 0.004193626344203949, 0.001630839891731739, 0.0037963634822517633, 0.002452795160934329, 0.0093132248148322105, 0.0047886278480291367, 0.0058648455888032913, 0.01175183430314064, 0.0061165764927864075, 0.0064935246482491493, 0.0065656807273626328, 0.016305051743984222, 0.0050134654156863689, 0.012151885777711868, 0.004110600333660841, 0.0032064125407487154, 0.0026117665693163872, 0.003814545227214694, 0.0077570942230522633, 0.047304507344961166, 0.012283421121537685, 0.0035854710731655359, 0.0046362178400158882, 0.0072710099630057812, 0.0079074827954173088, 0.002774230670183897, 0.0030423803254961967, 0.0015921043232083321, 0.0064014866948127747, 0.0023107216693460941, 0.0084158014506101608, 0.00820931326597929, 0.0033979448489844799, 0.0038310678210109472, 0.0034761268179863691, 0.019344951957464218, 0.0031885604839771986, 0.0074849138036370277, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1633, -348, -424, 787, 36936, 1652, -615, 6830, 1616, 1143, 398, 2711, 1353, 414, -1481, 1042, 2943, 13016, 4538, -727, 1432, -2454, -1, 2778, -169, -805, 1757, -55, 3959, 35961, 3296, 27, 525, -99, 4247, -190, 447, -426, 1584, 1701, 2481, 3386, 30, -346, 1119, 3735, 2536, -405, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00033769852598197758, 0.00038061672239564359, 0.00026132960920222104, 0.00040127302054315805, 2.9167102184146643e-05, 0.00032325266511179507, 0.00044271931983530521, 0.00014512457710225135, 0.00026378469192422926, 0.00055500067537650466, 0.00032527648727409542, 0.00030047458130866289, 0.0002014240890275687, 0.00036157132126390934, 0.00020289997337386012, 0.00019630095630418509, 0.00023445699480362236, 6.7256914917379618e-05, 0.00016458831669297069, 0.00032178539549931884, 0.00035647477488964796, 0.0001187077650683932, 0.00050589133752509952, 0.00025258236564695835, 0.00036922728759236634, 0.00058996223378926516, 0.00032263156026601791, 0.00054712290875613689, 0.00020710808166768402, 2.9060542146908119e-05, 0.00023066527501214296, 0.00069319055182859302, 0.0003941501781810075, 0.00038595634396187961, 0.00019984858226962388, 0.00031254338682629168, 0.00031665025744587183, 0.00044729234650731087, 0.00034924174542538822, 0.00037751978379674256, 0.00024610449327155948, 0.00021882691362407058, 0.00031124684028327465, 0.00045407179277390242, 0.00026970991166308522, 0.00015371368499472737, 0.00017444799595978111, 0.00030801311368122697, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -54,33,9,-11,-81,-45,-127,40, 
  /* [1][0][][] */ 76,-66,-50,-56,127,-71,81,20, 
  /* [2][0][][] */ -91,122,-44,-127,52,-37,-30,23, 
  /* [3][0][][] */ 37,22,82,10,83,127,102,-7, 
  /* [4][0][][] */ -88,-119,82,-9,-81,-127,7,-20, 
  /* [5][0][][] */ 127,-18,57,51,-67,-17,-8,-20, 
  /* [6][0][][] */ 18,32,127,-25,39,-37,-33,29, 
  /* [7][0][][] */ 12,21,-127,-41,-35,111,107,-73, 
  /* [8][0][][] */ 1,127,-23,10,61,124,34,86, 
  /* [9][0][][] */ 5,127,-51,66,42,-72,42,95, 
  /* [10][0][][] */ -2,-97,3,-41,-60,-127,-61,-88, 
  /* [11][0][][] */ -127,-68,111,39,3,-68,88,55, 
  /* [12][0][][] */ -21,47,-127,53,39,-63,-83,76, 
  /* [13][0][][] */ 75,-127,90,73,-7,21,38,-54, 
  /* [14][0][][] */ -55,119,-65,-121,-26,-127,-53,-76, 
  /* [15][0][][] */ 37,115,45,-17,35,-77,113,-127, 
  /* [16][0][][] */ -90,-127,-42,82,-60,32,2,47, 
  /* [17][0][][] */ -22,-127,-119,95,-54,97,-50,80, 
  /* [18][0][][] */ -109,-60,-58,86,-19,88,7,127, 
  /* [19][0][][] */ 54,-111,85,-127,38,-74,16,-24, 
  /* [20][0][][] */ -10,93,39,7,63,127,83,-13, 
  /* [21][0][][] */ 23,125,56,-33,41,-78,107,-127, 
  /* [22][0][][] */ 41,16,100,25,5,127,22,-37, 
  /* [23][0][][] */ -105,-73,24,-69,83,102,-65,-127, 
  /* [24][0][][] */ -86,-77,35,-100,115,95,-59,-127, 
  /* [25][0][][] */ 127,17,-56,-22,23,29,-64,-10, 
  /* [26][0][][] */ -127,-20,-114,-13,-34,-17,27,8, 
  /* [27][0][][] */ 98,29,-7,-56,-127,-29,81,99, 
  /* [28][0][][] */ -112,-88,-19,79,-100,-127,34,-14, 
  /* [29][0][][] */ 127,75,58,-114,44,13,-44,-120, 
  /* [30][0][][] */ -63,-77,39,-47,88,99,-81,-127, 
  /* [31][0][][] */ 55,36,-5,127,3,-61,4,3, 
  /* [32][0][][] */ -31,127,-10,22,33,52,-24,31, 
  /* [33][0][][] */ -51,127,-67,7,10,-23,-19,-9, 
  /* [34][0][][] */ -107,-122,-33,127,-14,26,11,106, 
  /* [35][0][][] */ -60,127,-35,-4,51,97,49,68, 
  /* [36][0][][] */ 77,23,-8,-36,-127,-27,80,108, 
  /* [37][0][][] */ -69,114,22,21,-127,117,-38,-90, 
  /* [38][0][][] */ 41,43,33,13,127,61,119,49, 
  /* [39][0][][] */ -20,-77,40,-5,9,47,-89,127, 
  /* [40][0][][] */ -90,-57,-75,127,-35,1,0,80, 
  /* [41][0][][] */ 127,37,66,114,-32,-39,-23,-42, 
  /* [42][0][][] */ -26,7,-69,-127,58,-92,-2,73, 
  /* [43][0][][] */ 30,-10,81,7,31,127,97,-1, 
  /* [44][0][][] */ -25,-17,-85,127,60,6,-40,-46, 
  /* [45][0][][] */ 59,101,124,-104,62,-53,18,-127, 
  /* [46][0][][] */ -43,-102,-25,21,1,55,-63,127, 
  /* [47][0][][] */ 61,22,123,7,68,110,127,-32, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0041709044016897678, 0.0047009857371449471, 0.0032276739366352558, 0.0049561108462512493, 0.00036024200380779803, 0.003992483951151371, 0.0054680127650499344, 0.0017924292478710413, 0.0032579968683421612, 0.0068547967821359634, 0.0040174801833927631, 0.0037111523561179638, 0.0024877828545868397, 0.0044657564722001553, 0.0025060113985091448, 0.0024245071690529585, 0.0028957712929695845, 0.00083068810636177659, 0.0020328252576291561, 0.0039743618108332157, 0.0044028093107044697, 0.0014661559835076332, 0.0062482482753694057, 0.0031196372583508492, 0.0045603150501847267, 0.0072866054251790047, 0.0039848126471042633, 0.0067574987187981606, 0.0025579857174307108, 0.00035892587038688362, 0.0028489397373050451, 0.008561575785279274, 0.0048681367188692093, 0.0047669350169599056, 0.0024683238007128239, 0.0038602140266448259, 0.003910937812179327, 0.005524494219571352, 0.0043134740553796291, 0.0046627353876829147, 0.0030396291986107826, 0.0027027246542274952, 0.0038442004006356001, 0.0056082271039485931, 0.0033311787992715836, 0.0018985130591318011, 0.0021546019706875086, 0.0038042606320232153, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -8152, -2275, 10912, -10326, 23240, 5661, -11000, 10791, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00020299751486163586, 0.00022168408031575382, 0.00014920611283741891, 0.00023270136443898082, 0.00020131484779994935, 0.00016653664351906627, 0.00019631815666798502, 0.00029118030215613544, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -16,-8,-23,-74,-33,-39,27,-5,43,1,-36,-11,118,127,-13,-106, 
  /* [1][0][][] */ 127,-53,-34,22,-42,78,-65,-34,-45,78,-40,-54,-13,-6,-53,-12, 
  /* [2][0][][] */ -41,-90,51,47,50,-53,-74,-14,46,-100,22,-127,57,-30,-68,23, 
  /* [3][0][][] */ 46,8,15,21,-2,67,-67,-23,127,53,8,23,6,-10,6,28, 
  /* [4][0][][] */ -90,-43,-35,-120,-3,29,63,-117,26,-19,-49,-41,-127,36,-44,-21, 
  /* [5][0][][] */ 88,54,59,-28,46,-50,-127,-127,-12,-64,78,53,-53,56,56,-54, 
  /* [6][0][][] */ 105,51,-127,-68,40,-59,9,-91,-30,33,-120,103,96,-102,2,79, 
  /* [7][0][][] */ -127,-3,103,-28,-65,-5,-6,-64,-51,67,76,-29,71,-20,24,21, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0086273942142724991, 0.0094215730205178261, 0.0063412594608962536, 0.0098898075520992279, 0.0085558807477355003, 0.0070778070949018002, 0.0083435215055942535, 0.012375161983072758, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 18441, -111, -417, 2275, -2031, 501, 9686, 1999, -316, 201, -2271, 2580, 1839, -1171, 211, -1211, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00012309307930991054, 0.00025057676248252392, 0.00015649433771613985, 0.00018054572865366936, 0.00088723277440294623, 0.00089049077359959483, 0.00017079788085538894, 0.00075939862290397286, 0.00036494247615337372, 0.0013263977598398924, 0.00024356531503144652, 0.00019927382527384907, 0.00010379509330959991, 0.00017874948389362544, 0.0002146805782103911, 0.00056889705592766404, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 9,-13,10,4,-13,10,7,14,-14,-12,4,-7,-9,-2,-6,-2, 10,-11,6,9,18,-3,-1,-28,-13,8,2,110,-23,24,17,-3, 4,-11,6,9,7,-15,-15,9,-3,1,1,-5,0,-1,0,-5, 
  /* [0][1][][] */ 16,-13,-4,12,127,-25,-127,-23,127,127,4,-11,126,-18,-9,-18, -127,127,127,5,-79,-92,-13,-105,16,-105,127,127,127,127,127,127, 27,-13,3,7,-5,127,8,-13,-1,-13,-8,-14,9,1,-21,-6, 
  /* [0][2][][] */ 6,-12,-5,-16,-12,14,50,5,-13,-8,-1,-10,1,7,-17,-10, 29,-23,6,-127,12,-17,-11,127,-7,1,-1,-25,-22,-49,-17,-34, 9,-12,7,2,6,-6,-1,-5,1,2,-4,-5,0,0,-13,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0052314558997750282, 0.010649511590600014, 0.0066510089673101902, 0.007673193234950304, 0.037707392126321793, 0.037845857441425323, 0.0072589097544550896, 0.032274439930915833, 0.015510055236518383, 0.056371904909610748, 0.010351525619626045, 0.0084691373631358147, 0.0044112913310527802, 0.0075968527235090733, 0.0091239241883158684, 0.024178124964237213, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1620, -1234, -1120, -1244, 54117, 68592, 7470, 23013, 4525, 10566, 871, -1763, 7761, -1967, -926, 26481, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00016393183614127338, 0.00035975544597022235, 0.0001835402799770236, 0.00014356583415064961, 2.4863969883881509e-05, 2.0842418962274678e-05, 0.00011978681141044945, 2.1973490220261738e-05, 0.00014932874182704836, 3.3522403100505471e-05, 0.00028131777071394026, 0.00029318520682863891, 0.00025609065778553486, 1.8319906303077005e-05, 0.00026062293909490108, 3.6784622352570295e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -74, -96, -23, 
  /* [0][1][][] */ 68, -28, 19, 
  /* [0][2][][] */ 36, 127, 23, 
  /* [1][0][][] */ 111, -94, -8, 
  /* [1][1][][] */ -127, 109, 27, 
  /* [1][2][][] */ 17, 1, -10, 
  /* [2][0][][] */ -20, 1, -43, 
  /* [2][1][][] */ 38, 96, 127, 
  /* [2][2][][] */ -9, -89, -74, 
  /* [3][0][][] */ 122, 127, 61, 
  /* [3][1][][] */ 5, -18, -11, 
  /* [3][2][][] */ -96, -121, -39, 
  /* [4][0][][] */ 21, -72, -10, 
  /* [4][1][][] */ 32, -127, 0, 
  /* [4][2][][] */ 27, -78, -11, 
  /* [5][0][][] */ -56, 28, -13, 
  /* [5][1][][] */ -127, 31, -14, 
  /* [5][2][][] */ -100, 20, -16, 
  /* [6][0][][] */ -23, 77, 127, 
  /* [6][1][][] */ -58, 52, -21, 
  /* [6][2][][] */ -42, -58, -96, 
  /* [7][0][][] */ 48, 17, -26, 
  /* [7][1][][] */ 127, 75, -7, 
  /* [7][2][][] */ 33, -3, -34, 
  /* [8][0][][] */ -20, -29, 53, 
  /* [8][1][][] */ -53, -85, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -22, 51, -8, 
  /* [9][1][][] */ -12, 127, -16, 
  /* [9][2][][] */ -6, 100, -11, 
  /* [10][0][][] */ 27, 91, 14, 
  /* [10][1][][] */ -35, -127, -29, 
  /* [10][2][][] */ 14, 43, 19, 
  /* [11][0][][] */ 10, -16, 12, 
  /* [11][1][][] */ 66, -89, 36, 
  /* [11][2][][] */ -81, 127, -43, 
  /* [12][0][][] */ -42, 47, -11, 
  /* [12][1][][] */ -127, 111, 4, 
  /* [12][2][][] */ -79, 76, 3, 
  /* [13][0][][] */ 41, -10, -5, 
  /* [13][1][][] */ 105, 71, 4, 
  /* [13][2][][] */ 109, 127, 64, 
  /* [14][0][][] */ -28, -26, 52, 
  /* [14][1][][] */ 48, 103, -127, 
  /* [14][2][][] */ -14, -69, 85, 
  /* [15][0][][] */ -64, -21, 21, 
  /* [15][1][][] */ -127, -127, 5, 
  /* [15][2][][] */ -12, -59, -13, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.04180261492729187, 0.091737635433673859, 0.046802770346403122, 0.036609284579753876, 0.0063403118401765823, 0.0053148167207837105, 0.030545635148882866, 0.0056032398715615273, 0.038078825920820236, 0.0085482122376561165, 0.071736030280590057, 0.074762225151062012, 0.065303117036819458, 0.0046715759672224522, 0.066458843648433685, 0.0093800779432058334, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.080965302884578705, } };
const TfArray<1, int> quant46_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.054576806724071503, } };
const TfArray<1, int> quant50_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.049851641058921814, } };
const TfArray<1, int> quant53_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.073223613202571869, } };
const TfArray<1, int> quant54_zero = { 1, { -40 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.04693228006362915, } };
const TfArray<1, int> quant58_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.022503616288304329, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.044544212520122528, } };
const TfArray<1, int> quant61_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.063615895807743073, } };
const TfArray<1, int> quant62_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.020811628550291061, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.058911312371492386, } };
const TfArray<1, int> quant65_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.10300857573747635, } };
const TfArray<1, int> quant66_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.044678568840026855, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.082798652350902557, } };
const TfArray<1, int> quant69_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
